@extends('lk.wrap')
@section('content')
<!-- ************************************************* -->


<section class="navlkMain">
	<div class="lkLeftMenu">
		<div class="lkLogo">
			<a href="#">WESMO</a>
		</div>
		<div class="lkProfImg" style="background-image: url(/public/images/work6.png);"></div>
		<h3 class="lkUserName">Магомедов Магомед</h3>
		<div class="editUser">
			<a href="#">
				<div class="editUser__left">
					<img src="/public/images/settingsIcons.png" alt="">
				</div>
				<div class="editUser__right">
					<span>Редактировать</span>
				</div>
			</a>
		</div>
		<h3 class="menuLk">МЕНЮ</h3>
		<ul>
			<li>
				<a href="/lk">
					<div class="navItemLk">
						<div class="navItemLk__left">
							<img src="/public/images/soobhestvo.png" alt="">
						</div>
						<div class="navItemLk__right">
							<span>Сообщество университета</span>
						</div>
					</div>
				</a>
			</li>


			<li>
				<a href="/lk/predmets/" class="menuActive">
					<div class="navItemLk">
						<div class="navItemLk__left">
							<img src="/public/images/itemsActive.png" alt="">
						</div>
						<div class="navItemLk__right">
							<span>Предметы</span>
						</div>
					</div>
				</a>
			</li>


			<li>
				<a href="/lk/practics/">
					<div class="navItemLk">
						<div class="navItemLk__left">
							<img src="/public/images/practic.png" alt="">
						</div>
						<div class="navItemLk__right">
							<span>Практика</span>
						</div>
					</div>
				</a>
			</li>


			<li>
				<a href="/lk/achivment/">
					<div class="navItemLk">
						<div class="navItemLk__left">
							<img src="/public/images/achivments.png" alt="">
						</div>
						<div class="navItemLk__right">
							<span>Очки и достижения</span>
						</div>
					</div>
				</a>
			</li>


		</ul>	

		<div class="supportLk">
			<a href="#">
				<div class="supportLk__left">
					<img src="/public/images/support.png" alt="">
				</div>
				<div class="supportLk__right">
					Тех.поддержка
				</a>
			</div>
		</div>

	</div>
	<div class="lkTopMenu">
		<div class="lkTopMenuWrapper">
			<div class="lkTopMenu__left">
				<img src="/public/images/iconSearch.png" alt="">
				<div class="formLkSearch">
					<form action="">
						<input type="text" placeholder="Поиск по курсам, сообществу, предметам и практики">
					</form>
				</div>
			</div>	
			<div class="lkTopMenu__right">
				<div class="lkTopMenu__right--bell">
					<a href="#"><img src="/public/images/bell.png" alt=""></a>
				</div> 
				<div class="lkTopMenu__right--enter">
					<a href="#"><img src="/public/images/logOut.png" alt=""></a>
				</div>
			</div>
		</div>
		<div class="hrLk"></div>
		<div class="lkTopMenu__bottomSection">
			<div class="lkTopMenu__bottomSection--left">
				<img src="/public/images/dopMenu.png" alt="">
			</div>
			<div class="lkTopMenu__bottomSection--right">
				<span>Популярные</span><i class="fa fa-angle-down" aria-hidden="true"></i>
			</div>
		</div>
	</div>
	<div class="lkMainContent">
		<div class="lkMainContent__wrapper">
			<div class="lkMainContent__wrapper--left">
				<h3>
					<span>
						<img src="/public/images/community.png" alt="">
					</span>
					<span class="lkMainContent__text">ОБУЧЕНИЕ</span>
				</h3>
			</div>

			<div class="lkMainContent__wrapper--right">
				<form action="#" class="formFacultet">
					<select name="selectFacultet">
						<option value="web">Android-разработка</option>
						<option value="2">Веб-разработка</option>
						<option value="3">Веб-разработка</option>
					</select>	
					<i class="fa fa-angle-down" aria-hidden="true"></i>			
				</form>
			</div>

		</div>
		<div class="hrLk"></div>
		<div class="userInfo">

			<!-- ************************ -->
			<div class="ibm-col-6-4">
				<p class="dw-article-series-head">Introduction to Java programming, Part 1</p>
				<h1 id="ibm-pagetitle-h1" class="ibm-h1">Java language basics</h1><p class="dw-article-subhead">Object-oriented programming on the Java platform</p>
				<!-- Article Top Bar -->
				<div class="ibm-columns dw-article-topbar">
					<!-- Author and article info. -->
					<div class="ibm-col-6-2 ibm-col-medium-6-4 dw-article-metadata">
						<div class="dw-article-avatar"><img width="42" height="42" src="/developerworks/i/p-jsperry60.jpg" alt="J Steven Perry"></div><div class="dw-article-authordate"><span class="dw-article-author"><a href="https://developer.ibm.com/author/steve.perry/">J Steven Perry</a></span><br><span class="dw-article-pubdate">Published on July 19,  2010</span><span class="dw-article-divider">/</span><span class="dw-article-updated">Updated: August 24,  2017</span></div>
					</div>
					<!-- Social -->
					<div class="ibm-col-6-2 ibm-col-medium-6-4 ibm-col-small-6-2 dw-article-social">
						<!-- Sharing links -->
						<div id="dw-article-share-inline">
							<div class="dw-article-sharelink-inline">
								<div class="ibm-sharethispage"><h4 class="ibm-bold">Share this page</h4><p class="ibm-icononly"><a class="ibm-facebook-encircled-link" href="http://www.facebook.com/sharer.php?u=http%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;t=Introduction%20to%20Java%20programming%2C%20Part%201%3A%20Java%20language%20basics" data-id="facebook" onclick="return IBMCore.common.module.sharethispage.gotoUrl(window.open(), this);">Facebook</a><a class="ibm-twitter-encircled-link" href="https://twitter.com/intent/tweet?url=https%3A%2F%2Fibm.co%2F2i8USvp&amp;text=Introduction%20to%20Java%20programming%2C%20Part%201%3A%20Java%20language%20basics&amp;via=developerWorks" data-id="twitter" onclick="return IBMCore.common.module.sharethispage.gotoUrl(window.open(), this);">Twitter</a><a class="ibm-linkedin-encircled-link" href="http://www.linkedin.com/shareArticle?mini=true&amp;url=http%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;title=Introduction%20to%20Java%20programming%2C%20Part%201%3A%20Java%20language%20basics" data-id="linkedin" onclick="return IBMCore.common.module.sharethispage.gotoUrl(window.open(), this);">Linked In</a><a class="ibm-googleplus-encircled-link" href="https://plus.google.com/share?url=http%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;t=Introduction%20to%20Java%20programming%2C%20Part%201%3A%20Java%20language%20basics" data-id="googleplus" onclick="return IBMCore.common.module.sharethispage.gotoUrl(window.open(), this);">Google+</a><a class="ibm-email-encircled-link" href="mailto:?subject=Introduction%20to%20Java%20programming%2C%20Part%201%3A%20Java%20language%20basics&amp;body=http%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html" data-id="email" onclick="">E-mail this page</a></p></div>
							</div>
						</div>
						<!-- Number of comments and link to comments -->
						<div id="dw-article-cmts">
							<div class="dw-article-cmtslink">
								<a onclick="tocLink('#icomments')" href="#icomments" role="link" tabindex="0" aria-label="Comments">
									<img src="//dw1.s81c.com/developerworks/i/v18/article/dw-article-cmt-icon.png" width="29" height="29" alt="Comments">
								</a>
							</div>
							<div class="dw-article-cmtslink">
								<a onclick="tocLink('#icomments')" href="#icomments" role="link" tabindex="0">
									<div id="nCmts">33</div>
								</a>
							</div>
						</div>
					</div>
				</div>
				<div id="dw-series-container" style="display: block;"><h3 class="ibm-h3" id="dw-series-heading">Content series:</h3><div data-widget="showhide" data-type="panel" class="ibm-show-hide ibm-widget-processed"><h2 id="dw-series-show-hide"><a href="javascript:void();">This content is part <span id="dw-series-part">1</span> of <span id="dw-series-total">2</span> in the series: <span id="dw-series-title">Introduction to Java programming</span></a></h2><div class="ibm-container-body" id="dw-series-links" style="display: none;"><ul id="dw-series-list"><li class="dw-series-item">Part 1: Java language basics</li><li class="dw-series-item"><a href="http://www.ibm.com/developerworks/java/tutorials/j-introtojava2/index.html?ca=drs-" class="dw-series-article-link">Part 2: Constructs for real-world applications</a></li></ul></div></div></div>
				<!-- Article Body -->

				<p>Find out what to expect from this tutorial and how to get the most out of
					it.</p><h3 id="N10066" class="ibm-h3">About this tutorial</h3><p>The two-part <em>Introduction to Java programming</em> tutorial is meant
					for software developers who are new to Java technology. Work through both
					parts to get up and running with object-oriented programming (OOP) and
					real-world application development using the Java language and
					platform.</p><p>This first part is a step-by-step introduction to OOP using the Java
					language. The tutorial begins with an overview of the Java platform and
					language, followed by instructions for setting up a development
					environment consisting of a Java Development Kit (JDK) and the Eclipse
					IDE. After you're introduced to your development environment's components,
					you begin learning basic Java syntax hands-on.</p><p><a href="http://www.ibm.com/developerworks/java/tutorials/j-introtojava2/index.html">Part 2</a> covers more-advanced language features, including regular
					expressions, generics, I/O, and serialization. Programming examples in <a href="http://www.ibm.com/developerworks/java/tutorials/j-introtojava2/index.html">Part 2</a> build on the <code>Person</code> object that you begin
					developing in Part 1. </p><h3 id="N1007E" class="ibm-h3">Objectives</h3><p>When you finish Part 1, you'll be familiar with basic Java language syntax
					and able to write simple Java programs. Follow up with "<a href="http://www.ibm.com/developerworks/java/tutorials/j-introtojava2/index.html">Introduction to Java programming, Part 2: Constructs for real-world
						applications</a>" to build on this foundation. </p><h3 id="N10089" class="ibm-h3">Prerequisites</h3><p>This tutorial is for software developers who are not yet experienced with
					Java code or the Java platform. The tutorial includes an overview of OOP
					concepts.</p><h3 id="N10090" class="ibm-h3">System requirements</h3><p>To complete the exercises in this tutorial, you will install and set up a
					development environment consisting of:</p><ul class="ibm-bullet-list"><li>JDK 8 from Oracle</li><li>Eclipse IDE for Java Developers</li></ul><p>Download and installation instructions for both are included in the
					tutorial.</p><p>The recommended system configuration is:</p><ul class="ibm-bullet-list"><li>A system supporting Java SE 8 with at least 2GB of memory. Java 8 is
						supported on Linux®, Windows®, Solaris®, and Mac OS X. </li><li>At least 200MB of disk space to install the software components and
						examples.</li></ul><h2 id="N100AB" class="ibm-h2">Java platform overview</h2><p>Java technology is used to develop applications for a wide range of
					environments, from consumer devices to heterogeneous enterprise systems.
					In this section, get a high-level view of the Java platform and its
					components. </p><h3 id="N100B1" class="ibm-h3">The Java language</h3><div class="dw-article-sidebar ibm-background-cool-white-20"><p><strong>Get to know the Java APIs</strong></p><p>Most Java developers constantly reference the <a href="http://docs.oracle.com/javase/8/docs/api/">official online
							Java API documentation</a>— also called the Javadoc. By
						default, you see three panes in the Javadoc. The top-left pane shows
						all of the packages in the API, and the bottom-left pane shows the
						classes in each package. The main pane (to the right) shows details
						for the currently selected package or class. For example, if you click
						the <code>java.util</code> package in the top-left pane and then click
						the <code>ArrayList</code> class listed below it, you see details
						about <code>ArrayList</code> in the right pane, including a
						description of what it does, how to use it, and its methods. </p></div><p>Like any programming language, the Java language has its own structure,
					syntax rules, and programming paradigm. The Java language's programming
					paradigm is based on the concept of OOP, which the language's features
					support.</p><p>The Java language is a C-language derivative, so its syntax rules look much
					like C's. For example, code blocks are modularized into methods and
					delimited by braces (<code>{</code> and <code>}</code>), and variables are
					declared before they are used. </p><p>Structurally, the Java language starts with <em>packages</em>. A package is
					the Java language's namespace mechanism. Within packages are classes, and
					within classes are methods, variables, constants, and more. You learn
					about the parts of the Java language in this tutorial. </p><h3 id="N100DA" class="ibm-h3">The Java compiler</h3><p>When you program for the Java platform, you write source code in .java
					files and then compile them. The compiler checks your code against the
					language's syntax rules, then writes out <em>bytecode</em> in .class
					files. Bytecode is a set of instructions targeted to run on a Java virtual
					machine (JVM). In adding this level of abstraction, the Java compiler
					differs from other language compilers, which write out instructions
					suitable for the CPU chipset the program will run on. </p><h3 id="N100E4" class="ibm-h3">The JVM</h3><p>At runtime, the JVM reads and interprets .class files and executes the
					program's instructions on the native hardware platform for which the JVM
					was written. The JVM interprets the bytecode just as a CPU would interpret
					assembly-language instructions. The difference is that the JVM is a piece
					of software written specifically for a particular platform. The JVM is the
					heart of the Java language's "write-once, run-anywhere" principle. Your
					code can run on any chipset for which a suitable JVM implementation is
					available. JVMs are available for major platforms like Linux and Windows,
					and subsets of the Java language have been implemented in JVMs for mobile
					phones and hobbyist chips. </p><h3 id="N100EB" class="ibm-h3">The garbage collector</h3><p>Rather than forcing you to keep up with memory allocation (or use a
					third-party library to do so), the Java platform provides memory
					management out of the box. When your Java application creates an object
					instance at runtime, the JVM automatically allocates memory space for that
					object from the <em>heap</em>— a pool of memory set aside for your program to use. The Java
					<em>garbage collector</em> runs in the background, keeping track of
					which objects the application no longer needs and reclaiming memory from
					them. This approach to memory handling is called <em>implicit memory
						management</em> because it doesn't require you to write any
					memory-handling code. Garbage collection is one of the essential features
					of Java platform performance. </p><h3 id="N100FC" class="ibm-h3">The Java Development Kit</h3><p>When you download a Java Development Kit (JDK), you get — in
					addition to the compiler and other tools — a complete class library
					of prebuilt utilities that help you accomplish most common
					application-development tasks. The best way to get an idea of the scope of
					the JDK packages and libraries is to check out the <a href="http://docs.oracle.com/javase/8/docs/api/">JDK API
						documentation</a>. </p><h3 id="N1010B" class="ibm-h3">The Java Runtime Environment </h3><p>The Java Runtime Environment (JRE; also known as the Java runtime) includes
					the JVM, code libraries, and components that are necessary for running
					programs that are written in the Java language. The JRE is available for
					multiple platforms. You can freely redistribute the JRE with your
					applications, according to the terms of the JRE license, to give the
					application's users a platform on which to run your software. The JRE is
					included in the JDK.</p><h2 id="N10112" class="ibm-h2">Setting up your Java development
					environment</h2><p>In this section, you'll download and install the JDK and the current
					release of the Eclipse IDE, and you'll set up your Eclipse development
					environment. </p><p>If you already have the JDK and Eclipse IDE installed, you might want to
					skip to the "<a href="#N10212">Getting started with Eclipse</a>" section
					or to the one after that, "<a href="#N1028C">Object-oriented programming
						concepts</a>." </p><h3 id="N10122" class="ibm-h3">Your development environment</h3><p>The JDK includes a set of command-line tools for compiling and running your
					Java code, including a complete copy of the JRE. Although you can use
					these tools to develop your applications, most developers appreciate the
					additional functionality, task management, and visual interface of an
					IDE.</p><p>Eclipse is a popular open source IDE for Java development. Eclipse handles
					basic tasks, such as code compilation and debugging, so that you can focus
					on writing and testing code. In addition, you can use Eclipse to organize
					source code files into projects, compile and test those projects, and
					store project files in any number of source repositories. You need an
					installed JDK to use Eclipse for Java development. If you download one of
					the Eclipse bundles, it will come with the JDK already.</p><h3 id="N1012B" class="ibm-h3">Install the JDK</h3><p>Follow these steps to download and install the JDK:</p><ol><li>Browse to <a href="http://www.oracle.com/technetwork/java/javase/downloads">Java SE Downloads</a> and click the <strong>Java Platform
							(JDK)</strong> box to display the download page for the latest
						version of the JDK. </li><li>Agree to the license terms for the version you want to download.</li><li>Choose the download that matches your operating system and chip
						architecture. </li></ol><h4 id="N10140" class="ibm-h4">Windows</h4><ol><li>Save the file to your hard drive when prompted.</li><li>When the download is complete, run the install program. Install the
						JDK to your hard drive in an easy-to-remember location such as
						C:\home\Java\jdk1.8.0_92. (As in this example, it's a good idea to
						encode the update number in the name of the install directory that you
						choose.) </li></ol><h4 id="N1014A" class="ibm-h4">OS X</h4><ol><li>When the download is complete, double-click it to mount it.</li><li>Run the install program. You do not get to choose where the JDK is
						installed. You can run <code>/usr/libexec/java_home -1.8</code> to see
						the location of JDK 8 on your Mac. The path that's displayed is
						similar to
						/Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home. </li></ol><p>See <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/install/install_overview.html">JDK 8 and JRE 8 Installation</a> for more information, including
					instructions for installing on Solaris or Linux.</p><p> You now have a Java environment on your computer. Next, you'll install the
					Eclipse IDE.</p><h3 id="N1015F" class="ibm-h3">Install Eclipse</h3><p>To download and install Eclipse, follow these steps:</p><ol><li>Browse to the <a href="http://www.eclipse.org/downloads/eclipse-packages/">Eclipse
							packages downloads page</a>. </li><li>Click <strong>Eclipse IDE for Java Developers</strong>. </li><li>Under Download Links on the right side, choose your platform (the site
						might already have sniffed out your OS type).</li><li>Click the mirror you want to download from; then, save the file to
						your hard drive.</li><li>When the download finishes, open the file and run the installation
						program, accepting the defaults.</li></ol><h3 id="N10178" class="ibm-h3">Set up Eclipse</h3><p>The Eclipse IDE sits atop the JDK as a useful abstraction, but it still
					needs to access the JDK and its various tools. Before you can use Eclipse
					to write Java code, you must tell it where the JDK is located.</p><p>To set up your Eclipse development environment:</p><ol><li>Launch Eclipse from your local hard disk. (In my case, the location is
						/Users/sperry/eclipse/java-neon.)</li><li>When asked which workspace you want to open, choose the default.</li><li>Close the Welcome to Eclipse window. (The welcome window is displayed
						each time you enter a new workspace. You can disable this behavior by
						deselecting the "Always show Welcome at start up" check box.)</li><li>Select <strong>Preferences &gt; Java &gt; Installed JREs</strong>.
						Figure 1 shows this selection highlighted in the Eclipse setup window
						for the JRE. <h5 id="fig1" class="ibm-h5">Figure 1. Configuring the JDK that Eclipse
							uses</h5><img src="figure1.png" class="ibm-downsize" alt="Screenshot of correct JDK JRE setup in Eclipse" height="545" width="969"><p class="ibm-ind-link"><a class="ibm-popup-link" onclick="IBMCore.common.widget.overlay.show('N10192');return false;" href="#N10192">View image at full size</a></p></li><li>Make sure that Eclipse points to the JRE that you downloaded with the
						JDK. If Eclipse does not automatically detect the JDK that you
						installed, click <strong>Add...</strong>, and in the next dialog box,
						click <strong>Standard VM</strong> and then click
						<strong>Next</strong>. </li><li>Specify the JDK's home directory (such as C:\home\jdk1.8.0_92 on
						Windows), and then click <strong>Finish</strong>. </li><li>Confirm that the JDK that you want to use is selected and click
						<strong>OK</strong>. </li></ol><p>Eclipse is now set up and ready for you to create projects, and compile and
					run Java code. The next section familiarizes you with Eclipse.</p><h2 id="N101AE" class="ibm-h2">Getting started with Eclipse</h2><p>Eclipse is more than an IDE; it's an entire development ecosystem. This
					section is a brief hands-on introduction to using Eclipse for Java
					development. </p><h3 id="eclipse" class="ibm-h3">The Eclipse development
					environment</h3><p>The Eclipse development environment has four main components:</p><ul class="ibm-bullet-list"><li>Workspace</li><li>Projects</li><li>Perspectives</li><li>Views</li></ul><p>The primary unit of organization in Eclipse is the <em>workspace</em>. A
					workspace contains all of your <em>projects</em>. A <em>perspective</em>
					is a way of looking at each project (hence the name), and within a
					perspective are one or more <em>views</em>.</p><p>Figure 2 shows the Java perspective, which is the default perspective for
					Eclipse. You see this perspective when you start Eclipse.</p><h5 id="fig2" class="ibm-h5">Figure 2. Eclipse Java perspective</h5><img src="figure2.png" class="ibm-downsize" alt="Screenshot of the Eclipse IDE startup screen showing a default Java perspective." height="805" width="1000"><p class="ibm-ind-link"><a class="ibm-popup-link" onclick="IBMCore.common.widget.overlay.show('N101D9');return false;" href="#N101D9">View image at full size</a></p><p>The Java perspective contains the tools that you need to begin writing Java
					applications. Each tabbed window shown in Figure 2 is a view for the Java
					perspective. Package Explorer and Outline are two particularly useful
					views.</p><p>The Eclipse environment is highly configurable. Each view is dockable, so
					you can move it around in the Java perspective and place it where you want
					it. For now, though, stick with the default perspective and view
					setup.</p><h3 id="N101E2" class="ibm-h3">Create a project</h3><p>Follow these steps to create a new Java project:</p><ol><li>Click <strong>File &gt; New &gt; Java Project...</strong> to start the
						New Java Project wizard, shown in Figure 3. <h5 id="fig3" class="ibm-h5">Figure 3. New Java Project
							wizard</h5><img src="figure3.png" class="ibm-downsize" alt="Screenshot of the New Java Project wizard" height="735" width="600"><p class="ibm-ind-link ibm-hide"><a class="ibm-popup-link" onclick="IBMCore.common.widget.overlay.show('N101F4');return false;" href="#N101F4">View image at full size</a></p></li><li>Enter <code>Tutorial</code> as the project name and use the workspace
						location that you opened when you opened Eclipse.</li><li>Verify the JDK that you're using.</li><li>Click <strong>Finish</strong> to accept the project setup and create
						the project. </li></ol><p>You have now created a new Eclipse Java project and source folder. Your
					development environment is ready for action. However, an understanding of
					the OOP paradigm — covered in this tutorial's next section —
					is essential.</p><h2 id="N1020B" class="ibm-h2">Object-oriented programming concepts and
					principles</h2><p>The Java language is (mostly) object oriented. This section is an
					introduction to OOP language concepts, using structured programming as a
					point of contrast.</p><h3 id="oop-concepts" class="ibm-h3">What is an
					object?</h3><p>Object-oriented languages follow a different programming pattern from
					structured programming languages like C and COBOL. The
					structured-programming paradigm is highly data oriented: You have data
					structures, and then program instructions act on that data.
					Object-oriented languages such as the Java language combine data and
					program instructions into <em>objects</em>.</p><p>An object is a self-contained entity that contains attributes and behavior,
					and nothing more. Instead of having a data structure with fields
					(attributes) and passing that structure around to all of the program logic
					that acts on it (behavior), in an object-oriented language, data and
					program logic are combined. This combination can occur at vastly different
					levels of granularity, from fine-grained objects such as a
					<code>Number</code>, to coarse-grained objects, such as a
					<code>FundsTransfer</code> service in a large banking application.</p><h4 id="N10223" class="ibm-h4">Parent and child objects</h4><p>A <em>parent object</em> is one that serves as the structural basis for
					deriving more-complex <em>child objects</em>. A child object looks like
					its parent but is more specialized. With the object-oriented paradigm, you
					can reuse the common attributes and behavior of the parent object, adding
					to its child objects attributes and behavior that differ.</p><h4 id="N10230" class="ibm-h4">Object communication and
					coordination</h4><p>Objects talk to other objects by sending messages (<em>method calls</em>,
					in Java parlance). Furthermore, in an object-oriented application, program
					code coordinates the activities among objects to perform tasks within the
					context of the specific application domain.</p><h4 id="N1023A" class="ibm-h4">Object summary</h4><p>A well-written object:</p><ul class="ibm-bullet-list"><li>Has well-defined boundaries</li><li>Performs a finite set of activities</li><li>Knows only about its data and any other objects that it needs to
						accomplish its activities</li></ul><p>In essence, an object is a discrete entity that has only the necessary
					dependencies on other objects to perform its tasks.</p><p>It's time to see what a Java object looks like.</p><h3 id="N1024C" class="ibm-h3">Example: A person object</h3><p>This first example is based on a common application-development scenario:
					an individual being represented by a <code>Person</code> object.</p><p>You know from the definition of an object that an object has two primary
					elements: attributes and behavior. Here's how these elements apply to the
					<code>Person</code> object.</p><p>As a rule of thumb, think of the attributes of an object as
					<strong>nouns</strong> and behavior as <strong>verbs</strong>.</p><h4 id="N10263" class="ibm-h4">Attributes (nouns)</h4><p>What attributes can a person have? Some common ones include:</p><ul class="ibm-bullet-list"><li>Name</li><li>Age</li><li>Height</li><li>Weight</li><li>Eye color</li><li>Gender</li></ul><p>You can probably think of more (and you can always add more attributes
					later), but this list is a good start.</p><h4 id="N10279" class="ibm-h4">Behavior (verbs)</h4><p>An actual person can do all sorts of things, but object behaviors usually
					relate to application context of some kind. In a business-application
					context, for instance, you might want to ask your <code>Person</code>
					object, "What is your body mass index (BMI)?" In response,
					<code>Person</code> would use the values of its height and weight
					attributes to calculate the BMI.</p><p>More-complex logic can be hidden inside of the <code>Person</code> object,
					but for now, suppose that <code>Person</code> has the following
					behavior:</p><ul class="ibm-bullet-list"><li>Calculate BMI</li><li>Print all attributes</li></ul><h4 id="state and string" class="ibm-h4">State and
					string</h4><p><em>State</em> is an important concept in OOP. An object's state is
					represented at any moment in time by the values of its attributes.</p><p>In the case of <code>Person</code>, its state is defined by attributes such
					as name, age, height, and weight. If you wanted to present a list of
					several of those attributes, you might do so by using a
					<code>String</code> class, which you'll learn more about later.</p><p>Using the concepts of state and string together, you can say to
					<code>Person</code>, "Tell me all about you by giving me a listing (or
					<code>String</code>) of your attributes."</p><h3 id="N102AC" class="ibm-h3">Principles of OOP</h3><p>If you come from a structured-programming background, the OOP value
					proposition might not be clear yet. After all, the attributes of a person
					and any logic to retrieve (and convert) those values can be written in C
					or COBOL. The benefits of the OOP paradigm become clearer if you
					understand its defining principles: <em>encapsulation</em>,
					<em>inheritance</em>, and <em>polymorphism</em>.</p><h4 id="N102BB" class="ibm-h4">Encapsulation</h4><p>Recall that an object is above all discrete, or self-contained. This
					characteristic is the principle of <em>encapsulation</em> at work.
					<em>Hiding</em> is another term that's sometimes used to express the
					self-contained, protected nature of objects.</p><p>Regardless of terminology, what's important is that the object maintains a
					boundary between its state and behavior and the outside world. Like
					objects in the real world, objects used in computer programming have
					various types of relationships with different categories of objects in the
					applications that use them.</p><p>On the Java platform, you can use <em>access modifiers</em> (which you'll
					learn about later) to vary the nature of object relationships from
					<em>public</em> to <em>private</em>. Public access is wide open,
					whereas private access means the object's attributes are accessible only
					within the object itself.</p><p>The public/private boundary enforces the object-oriented principle of
					encapsulation. On the Java platform, you can vary the strength of that
					boundary on an object-by-object basis. Encapsulation is a powerful feature
					of the Java language.</p><h4 id="N102D7" class="ibm-h4">Inheritance</h4><p>In structured programming, it's common to copy a structure, give it a new
					name, and add or modify the attributes that make the new entity (such as
					an <code>Account</code> record) different from its original source. Over
					time, this approach generates a great deal of duplicated code, which can
					create maintenance issues.</p><p>OOP introduces the concept of <em>inheritance</em>, whereby specialized
					classes — without additional code — can "copy" the
					attributes and behavior of the source classes that they specialize. If
					some of those attributes or behaviors need to change, you override them.
					The only source code you change is the code needed for creating
					specialized classes. The source object is called the <em>parent</em>, and
					the new specialization is called the <em>child</em>— terms that you've already been introduced to.</p><p>Suppose that you're writing a human-resources application and want to use
					the <code>Person</code> class as the basis (also called the <em>super
						class</em>) for a new class called <code>Employee</code>. Being the
					child of <code>Person</code>, <code>Employee</code> would have all of the
					attributes of a <code>Person</code> class, along with additional ones,
					such as:</p><ul class="ibm-bullet-list"><li>Taxpayer identification number</li><li>Employee number</li><li>Salary</li></ul><p>Inheritance makes it easy to create the new <code>Employee</code> class
					without needing to copy all of the <code>Person</code> code manually.</p><h4 id="N10314" class="ibm-h4">Polymorphism</h4><p>Polymorphism is a harder concept to grasp than encapsulation and
					inheritance. In essence, polymorphism means that objects that belong to
					the same branch of a hierarchy, when sent the same message (that is, when
					told to do the same thing), can manifest that behavior differently.</p><p>To understand how polymorphism applies to a business-application context,
					return to the <code>Person</code> example. Remember telling
					<code>Person</code> to format its attributes into a <code>String</code>?
					Polymorphism makes it possible for <code>Person</code> to represent its
					attributes in various ways depending on the type of <code>Person</code> it
					is.</p><p>Polymorphism, one of the more complex concepts you'll encounter in OOP on
					the Java platform, is beyond the scope of this introductory tutorial.
					You'll explore encapsulation and inheritance in more depth in subsequent
					sections.</p><h3 id="N1032E" class="ibm-h3">Not a purely object-oriented
					language</h3><p>Two qualities differentiate the Java language from purely object-oriented
					languages such as Smalltalk. First, the Java language is a mixture of
					objects and <span data-widget="tooltip" class="tipso_style ibm-widget-processed">primitive types</span>. Second, with Java, you can write code that exposes the inner
					workings of one object to any other object that uses it.</p><p>The Java language does give you the tools necessary to follow sound OOP
					principles and produce sound object-oriented code. Because Java is not
					purely object oriented, you must exercise discipline in how you write code
					— the language doesn't force you to do the right thing, so you must
					do it yourself. You'll get tips in the "<a href="#writing">Writing good
						Java code</a>" section.</p><h2 id="N10345" class="ibm-h2">Getting started with the Java language</h2><p>It would be impossible to introduce the entire Java language syntax in a
					single tutorial. The remainder of Part 1 focuses on the basics of the
					language, leaving you with enough knowledge and practice to write simple
					programs. OOP is all about objects, so this section starts with two topics
					specifically related to how the Java language handles them: reserved words
					and the structure of a Java object.</p><h3 id="reserved" class="ibm-h3">Reserved words</h3><p>Like any programming language, the Java language designates certain words
					that the compiler recognizes as special. For that reason, you're not
					allowed to use them for naming your Java constructs. The list of reserved
					words (also called <em>keywords</em>) is surprisingly short:</p><div class="ibm-syntax-container"><div><div id="highlighter_242019" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">abstract</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">assert</code></div><div class="line number3 index2 alt2"><code class="htmlscript plain">boolean</code></div><div class="line number4 index3 alt1"><code class="htmlscript plain">break</code></div><div class="line number5 index4 alt2"><code class="htmlscript plain">byte</code></div><div class="line number6 index5 alt1"><code class="htmlscript plain">case</code></div><div class="line number7 index6 alt2"><code class="htmlscript plain">catch</code></div><div class="line number8 index7 alt1"><code class="htmlscript plain">char</code></div><div class="line number9 index8 alt2"><code class="htmlscript plain">class</code></div><div class="line number10 index9 alt1"><code class="htmlscript plain">const</code></div><div class="line number11 index10 alt2"><code class="htmlscript plain">continue</code></div><div class="line number12 index11 alt1"><code class="htmlscript plain">default</code></div><div class="line number13 index12 alt2"><code class="htmlscript plain">do</code></div><div class="line number14 index13 alt1"><code class="htmlscript plain">double</code></div><div class="line number15 index14 alt2"><code class="htmlscript plain">else</code></div><div class="line number16 index15 alt1"><code class="htmlscript plain">enum</code></div><div class="line number17 index16 alt2"><code class="htmlscript plain">extends</code></div><div class="line number18 index17 alt1"><code class="htmlscript plain">final</code></div><div class="line number19 index18 alt2"><code class="htmlscript plain">finally</code></div><div class="line number20 index19 alt1"><code class="htmlscript plain">float</code></div><div class="line number21 index20 alt2"><code class="htmlscript plain">for</code></div><div class="line number22 index21 alt1"><code class="htmlscript plain">goto</code></div><div class="line number23 index22 alt2"><code class="htmlscript plain">if</code></div><div class="line number24 index23 alt1"><code class="htmlscript plain">implements</code></div><div class="line number25 index24 alt2"><code class="htmlscript plain">import</code></div><div class="line number26 index25 alt1"><code class="htmlscript plain">instanceof</code></div><div class="line number27 index26 alt2"><code class="htmlscript plain">int</code></div><div class="line number28 index27 alt1"><code class="htmlscript plain">interface</code></div><div class="line number29 index28 alt2"><code class="htmlscript plain">long</code></div><div class="line number30 index29 alt1"><code class="htmlscript plain">native</code></div><div class="line number31 index30 alt2"><code class="htmlscript plain">new</code></div><div class="line number32 index31 alt1"><code class="htmlscript plain">package</code></div><div class="line number33 index32 alt2"><code class="htmlscript plain">private</code></div><div class="line number34 index33 alt1"><code class="htmlscript plain">protected</code></div><div class="line number35 index34 alt2"><code class="htmlscript plain">public</code></div><div class="line number36 index35 alt1"><code class="htmlscript plain">return</code></div><div class="line number37 index36 alt2"><code class="htmlscript plain">short</code></div><div class="line number38 index37 alt1"><code class="htmlscript plain">static</code></div><div class="line number39 index38 alt2"><code class="htmlscript plain">strictfp</code></div><div class="line number40 index39 alt1"><code class="htmlscript plain">super</code></div><div class="line number41 index40 alt2"><code class="htmlscript plain">switch</code></div><div class="line number42 index41 alt1"><code class="htmlscript plain">synchronized</code></div><div class="line number43 index42 alt2"><code class="htmlscript plain">this</code></div><div class="line number44 index43 alt1"><code class="htmlscript plain">throw</code></div><div class="line number45 index44 alt2"><code class="htmlscript plain">throws</code></div><div class="line number46 index45 alt1"><code class="htmlscript plain">transient</code></div><div class="line number47 index46 alt2"><code class="htmlscript plain">try</code></div><div class="line number48 index47 alt1"><code class="htmlscript plain">void</code></div><div class="line number49 index48 alt2"><code class="htmlscript plain">volatile</code></div><div class="line number50 index49 alt1"><code class="htmlscript plain">while</code></div></div></td></tr></tbody></table></div></div></div><p>You also may not use <code>true</code>, <code>false</code>, and
					<code>null</code> (technically, <span data-widget="tooltip" class="tipso_style ibm-widget-processed">literals</span> rather than keywords) to name Java constructs</p><p>One advantage of programming with an IDE is that it can use syntax coloring
					for reserved words.</p><h3 id="N1036C" class="ibm-h3">Structure of a Java class</h3><p>A class is a blueprint for a discrete entity (object) that contains
					attributes and behavior. The class defines the object's basic structure;
					at runtime, your application creates an <em>instance</em> of the object.
					An object has a well-defined boundary and a state, and it can do things
					when correctly asked. Every object-oriented language has rules about how
					to define a class.</p><p>In the Java language, classes are defined as shown in Listing 1:</p><h5 id="listing1" class="ibm-h5">Listing 1. Class definition</h5><div class="ibm-syntax-container"><div><div id="highlighter_430254" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">package packageName;</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">import ClassNameToImport; </code></div><div class="line number3 index2 alt2"><code class="htmlscript plain">accessSpecifier class ClassName {</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">accessSpecifier dataType variableName [= initialValue];</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">accessSpecifier ClassName([argumentList]) {</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">constructorStatement(s)</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">accessSpecifier returnType methodName ([argumentList]) {</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">methodStatement(s)</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">// This is a comment</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">/* This is a comment too */</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">/* This is a</code></div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">multiline</code></div><div class="line number15 index14 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">comment */</code></div><div class="line number16 index15 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><div class="dw-article-sidebar ibm-background-cool-white-20"><p><strong>Note</strong><br> In <a href="#listing1">Listing 1</a> and
						some other code examples in this section, square brackets indicate
						that the constructs within them are not required. The brackets (unlike
						<code>{</code> and <code>}</code>) are not part of the Java
						syntax.</p></div><p><a href="#listing1">Listing 1</a> contains various types of constructs,
					including <code>package</code> in line 1, <code>import</code> in line 2,
					and <code>class</code> in line 3. Those three constructs are in the list
					of <a href="#reserved">reserved words</a>, so they must be exactly what
					they are in Listing 1. The names that I've given the other constructs in
					Listing 1 describe the concepts that they represent.</p><p>Notice that lines 11 through 15 in <a href="#listing1">Listing 1</a> are
					comment lines. In most programming languages, programmers can add comments
					to help document the code. Java syntax allows for both single-line and
					multiline comments:</p><div class="ibm-syntax-container"><div><div id="highlighter_967370" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">// This is a comment</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">/* This is a comment too */</code></div><div class="line number3 index2 alt2"><code class="htmlscript plain">/* This is a</code></div><div class="line number4 index3 alt1"><code class="htmlscript plain">multiline</code></div><div class="line number5 index4 alt2"><code class="htmlscript plain">comment */</code></div></div></td></tr></tbody></table></div></div></div><p>A single-line comment must be contained on one line, although you can use
					adjacent single-line comments to form a block. A multiline comment begins
					with <code>/*</code>, must be terminated with <code>*/</code>, and can
					span any number of lines.</p><p>Next, I'll walk you through the constructs in <a href="#listing1">Listing
						1</a> in detail, starting with <code>package</code>.</p><h3 id="N103BB" class="ibm-h3">Packaging classes</h3><p>With the Java language, you can choose the names for your classes, such as
					<code>Account</code>, <code>Person</code>, or <code>LizardMan</code>. At
					times, you might end up using the same name to express two slightly
					different concepts. This situation, called a <em>name collision</em>,
					happens frequently. The Java language uses <em>packages</em> to resolve
					these conflicts.</p><p>A Java package is a mechanism for providing a <em>namespace</em>— an area inside of which names are unique, but outside of which
					they might not be. To identify a construct uniquely, you must fully
					qualify it by including its namespace.</p><p>Packages also give you a nice way to build more-complex applications with
					discrete units of functionality.</p><p>To define a package, use the <code>package</code> keyword followed by a
					legal package name, ending with a semicolon. Often package names follow
					this <em>de facto</em> standard scheme:</p><div class="ibm-syntax-container"><div><div id="highlighter_344827" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">package&nbsp; orgType.orgName.appName.compName;</code></div></div></td></tr></tbody></table></div></div></div><p>This package definition breaks down as:</p><ul class="ibm-bullet-list"><li><code><em>orgType</em></code> is the organization type, such as
						<code>com</code>, <code>org</code>, or <code>net</code>. </li><li><code><em>orgName</em></code> is the name of the organization's
						domain, such as <code>makotojava</code>, <code>oracle</code>, or
						<code>ibm</code>. </li><li><code><em>appName</em></code> is the name of the application,
						abbreviated. </li><li><code><em>compName</em></code> is the name of the component. </li></ul><p>You'll use this convention throughout this tutorial, and I recommend that
					you keep using it to define all of your Java classes in packages. (The
					Java language doesn't force you to follow this package convention. You
					don't need to specify a package at all, in which case all of your classes
					must have unique names and are in the default package.)</p><h3 id="N10410" class="ibm-h3">Import statements</h3><div class="dw-article-sidebar ibm-background-cool-white-20"><p><strong>Eclipse simplifies imports</strong><br> When you write code in
						the Eclipse editor, you can type the name of a class you want to use,
						followed by Ctrl+Shift+O. Eclipse figures out which imports you need
						and adds them automatically. If Eclipse finds two classes with the
						same name, Eclipse asks you which class you want to add imports
						for.</p></div><p>Up next in the class definition (referring back to <a href="#listing1">Listing 1</a>) is the <em>import statement</em>. An import statement
					tells the Java compiler where to find classes that you reference inside of
					your code. Any nontrivial class uses other classes for some functionality,
					and the import statement is how you tell the Java compiler about them.</p><p>An import statement usually looks like this:</p><div class="ibm-syntax-container"><div><div id="highlighter_980757" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">import ClassNameToImport;</code></div></div></td></tr></tbody></table></div></div></div><p>You specify the <code>import</code> keyword, followed by the class that you
					want to import, followed by a semicolon. The class name should be
					<em>fully qualified</em>, meaning that it should include its
					package.</p><p>To import all classes within a package, you can put <code>.*</code> after
					the package name. For example, this statement imports every class in the
					<code>com.makotojava</code> package:</p><div class="ibm-syntax-container"><div><div id="highlighter_290819" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">import com.makotojava.*;</code></div></div></td></tr></tbody></table></div></div></div><p>Importing an entire package can make your code less readable, however, so I
					recommend that you import only the classes that you need, using their
					fully qualified names.</p><h3 id="N10440" class="ibm-h3">Class declaration</h3><p>To define an object in the Java language, you must declare a class. Think
					of a class as a template for an object, like a cookie cutter.</p><p><a href="#listing1">Listing 1</a> includes this class declaration:</p><div class="ibm-syntax-container"><div><div id="highlighter_716030" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">accessSpecifier class ClassName {</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">accessSpecifier dataType variableName [= initialValue];</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">accessSpecifier ClassName([argumentList]) {</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">constructorStatement(s)</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">accessSpecifier returnType methodName([argumentList]) {</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">methodStatement(s)</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number9 index8 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>A class's <code><em>accessSpecifier</em></code> can have several values,
					but usually it's <code>public</code>. You'll look at other values of
					<code><em>accessSpecifier</em></code> soon.</p><p>You can name classes pretty much however you want, but the convention is to
					use <em>camel case</em>: Start with an uppercase letter, put the first
					letter of each concatenated word in uppercase, and make all the other
					letters lowercase. Class names should contain only letters and numbers.
					Sticking to these guidelines ensures that your code is more accessible to
					other developers who are following the same conventions.</p><h3 id="N10462" class="ibm-h3">Variables and methods</h3><p>Classes can have two types of <em>members</em>—<em>variables</em> and <em>methods</em>.</p><h4 id="N10472" class="ibm-h4">Variables</h4><p>The values of a class's variables distinguish each instance of that class
					and define its state. These values are often referred to as <em>instance
						variables</em>. A variable has:</p><ul class="ibm-bullet-list"><li>An <code><em>accessSpecifier</em></code></li><li>A <code><em>dataType</em></code></li><li>A <code><em>variableName</em></code></li><li>Optionally, an <code><em>initialValue</em></code></li></ul><p>The possible <code><em>accessSpecifier</em></code> values are:</p><div class="dw-article-sidebar ibm-background-cool-white-20"><p><strong>Public variables</strong><br> It's never a good idea to use
						public variables, but in extremely rare cases it can be necessary, so
						the option exists. The Java platform doesn't constrain your use cases,
						so it's up to you to be disciplined about using good coding
						conventions, even if tempted to do otherwise.</p></div><ul class="ibm-bullet-list"><li><code>public</code>: Any object in any package can see the variable.
						(Don't ever use this value; see the <strong>Public variables</strong>
						sidebar.) </li><li><code>protected</code>: Any object defined in the same package, or a
						subclass (defined in any package), can see the variable. </li><li>No specifier (also called <em>friendly</em> or <em>package
							private</em> access): Only objects whose classes are defined in
						the same package can see the variable. </li><li><code>private</code>: Only the class containing the variable can see
						it. </li></ul><p>A variable's <code><em>dataType</em></code> depends on what the variable is
					— it might be a primitive type or another class type (more about
					this later).</p><p>The <code><em>variableName</em></code> is up to you, but by convention,
					variable names use the camel case convention, except that they begin with
					a lowercase letter. (This style is sometimes called <em>lower camel
						case.</em>)</p><p>Don't worry about the <code><em>initialValue</em></code> for now; just know
					that you can initialize an instance variable when you declare it.
					(Otherwise, the compiler generates a default for you that is set when the
					class is instantiated.)</p><h4 id="N104CC" class="ibm-h4">Example: Class definition for
					Person</h4><p>Here's an example that summarizes what you've learned so far. Listing 2 is
					a class definition for <code>Person</code>.</p><h5 id="listing2" class="ibm-h5">Listing 2. Basic class definition for
					<code>Person</code></h5><div class="ibm-syntax-container"><div><div id="highlighter_59174" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">package com.makotojava.intro;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="htmlscript plain">public class Person {</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private String name;</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private int age;</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private int height;</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private int weight;</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private String eyeColor;</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private String gender;</code></div><div class="line number10 index9 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>This basic class definition for <code>Person</code> isn't useful at this
					point, because it defines only <code>Person</code>'s attributes (and
					private ones at that). To be more complete, the <code>Person</code> class
					needs behavior — and that means <em>methods</em>.</p><h4 id="N104EF" class="ibm-h4">Methods</h4><p>A class's methods define its behavior.</p><p>Methods fall into two main categories: <em>constructors</em>; and all other
					methods, which come in many types. A constructor method is used only to
					create an instance of a class. Other types of methods can be used for
					virtually any application behavior.</p><p>The class definition back in <a href="#listing1">Listing 1</a> shows the
					way to define the structure of a method, which includes elements like:</p><ul class="ibm-bullet-list"><li><code><em>accessSpecifier</em></code></li><li><code><em>returnType</em></code></li><li><code><em>methodName</em></code></li><li><code><em>argumentList</em></code></li></ul><p>The combination of these structural elements in a method's definition is
					called the method's <em>signature</em>.</p><p>Now take a closer look at the two method categories, starting with
					constructors.</p><h5 id="N10519" class="ibm-h5">Constructor methods</h5><p>You use constructors to specify how to instantiate a class. <a href="#listing1">Listing 1</a> shows the constructor-declaration
					syntax in abstract form, and here it is again:</p><div class="ibm-syntax-container"><div><div id="highlighter_185773" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">accessSpecifier ClassName([argumentList]) {</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">constructorStatement(s)</code></div><div class="line number3 index2 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><div class="dw-article-sidebar ibm-background-cool-white-20"><p><strong>Constructors are optional</strong><br> If you don't use a
						constructor, the compiler provides one for you, called the default (or
						<em>no-argument</em> or <em>no-arg</em>) constructor. If you use a
						constructor other than a no-arg constructor, the compiler doesn't
						automatically generate one for you.</p></div><p> A constructor's <code><em>accessSpecifier</em></code> is the same as for
					variables. The name of the constructor must match the name of the class.
					So if you call your class <code>Person</code>, the name of the constructor
					must also be <code>Person</code>.</p><p>For any constructor other than the default constructor (see the
					<strong>Constructors are optional</strong> sidebar), you pass an
					<code><em>argumentList</em></code>, which is one or more of:</p><div class="ibm-syntax-container"><div><div id="highlighter_711397" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">argumentType argumentName</code></div></div></td></tr></tbody></table></div></div></div><p> Arguments in an <code><em>argumentList</em></code> are separated by
					commas, and no two arguments can have the same name.
					<code><em>argumentType</em></code> is either a primitive type or another
					class type (the same as with variable types).</p><h5 id="N10557" class="ibm-h5">Class definition with a
					constructor</h5><p>Now, see what happens when you add the capability to create a
					<code>Person</code> object in two ways: by using a no-arg constructor and
					by initializing a partial list of attributes.</p><p>Listing 3 shows how to create constructors and also how to use
					<code>argumentList</code>:</p><h5 id="listing3" class="ibm-h5">Listing 3. <code>Person</code> class definition with a
					constructor </h5><div class="ibm-syntax-container"><div><div id="highlighter_777354" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">package com.makotojava.intro;</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">public class Person {</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">private String name;</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">private int age;</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">private int height;</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">private int&nbsp; weight;</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">private String eyeColor;</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">private String gender;</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">public Person() {</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">// Nothing to do...</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">public Person(String name, int age, int height, int weight String eyeColor, String gender) {</code></div><div class="line number15 index14 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">this.name = name;</code></div><div class="line number16 index15 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">this.age = age;</code></div><div class="line number17 index16 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">this.height = height;</code></div><div class="line number18 index17 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">this.weight = weight;</code></div><div class="line number19 index18 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">this.eyeColor = eyeColor;</code></div><div class="line number20 index19 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">this.gender = gender;</code></div><div class="line number21 index20 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number22 index21 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>Note the use of the <code>this</code> keyword in making the variable
					assignments in Listing 3. The <code>this</code> keyword is Java shorthand
					for "this object," and you must use it when you reference two variables
					with the same name. In this case, <code>age</code> is both a constructor
					parameter and a class variable, so the <code>this</code> keyword helps the
					compiler to tell which is which.</p><p>The <code>Person</code> object is getting more interesting, but it needs
					more behavior. And for that, you need more methods.</p><h5 id="N10582" class="ibm-h5">Other methods</h5><p>A constructor is a particular kind of method with a particular function.
					Similarly, many other types of methods perform particular functions in
					Java programs. Exploration of other method types begins in this section
					and continues throughout the tutorial.</p><p>Back in <a href="#listing1">Listing 1</a>, you saw how to declare a
					method:</p><div class="ibm-syntax-container"><div><div id="highlighter_630501" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">accessSpecifier returnType methodName ([argumentList]) {</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">methodStatement(s)</code></div><div class="line number3 index2 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>Other methods look much like constructors, with a couple of exceptions.
					First, you can name other methods whatever you like (though, of course,
					certain rules apply). I recommend the following conventions:</p><ul class="ibm-bullet-list"><li>Start with a lowercase letter.</li><li>Avoid numbers unless they are absolutely necessary.</li><li>Use only alphabetic characters.</li></ul><p>Second, unlike constructors, other methods have an optional <em>return
						type</em>.</p><h5 id="N105A1" class="ibm-h5">Person's other methods</h5><p>Armed with this basic information, you can see in Listing 4 what happens
					when you add a few more methods to the <code>Person</code> object. (I've
					omitted constructors for brevity.)</p><h5 id="listing4" class="ibm-h5">Listing 4. <code>Person</code> with a few new methods </h5><div class="ibm-syntax-container"><div><div id="highlighter_284433" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">package com.makotojava.intro;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="htmlscript plain">public class Person {</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private String name;</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private int age;</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private int height;</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private int&nbsp; weight;</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private String eyeColor;</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private String gender;</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public String getName() { return name; }</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public void setName(String value) { name = value; }</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">// Other getter/setter combinations...</code></div><div class="line number14 index13 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>Notice the comment in Listing 4 about "getter/setter combinations." You'll
					work more with getters and setters later. For now, all you need to know is
					that a <em>getter</em> is a method for retrieving the value of an
					attribute, and a <em>setter</em> is a method for modifying that value.
					Listing 4 shows only one getter/setter combination (for the
					<code>Name</code> attribute), but you can define more in a similar
					fashion.</p><p>Note in <a href="#listing4">Listing 4</a> that if a method doesn't return a
					value, you must tell the compiler by specifying the <code>void</code>
					return type in its signature.</p><h5 id="N105C8" class="ibm-h5">Static and instance methods</h5><p>Generally, two types of (nonconstructor) methods are used: <em>instance
						methods</em> and <em>static methods</em>. Instance methods depend on
					the state of a specific object instance for their behavior. Static methods
					are also sometimes called <em>class methods</em>, because their behavior
					isn't dependent on any single object's state. A static method's behavior
					happens at the class level.</p><p> Static methods are used largely for utility; you can think of them as
					being global methods (à la C) while keeping the code for the method with
					the class that defines it.</p><p> For example, throughout this tutorial, you'll use the JDK
					<code>Logger</code> class to output information to the console. To create
					a <code>Logger</code> class instance, you don't instantiate a
					<code>Logger</code> class; instead, you invoke a static method named
					<code>getLogger()</code>.</p><p>The syntax for invoking a static method on a class is different from the
					syntax used to invoke a method on an object. You also use the name of the
					class that contains the static method, as shown in this invocation:</p><div class="ibm-syntax-container"><div><div id="highlighter_662666" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">Logger l = Logger.getLogger("NewLogger");</code></div></div></td></tr></tbody></table></div></div></div><p>In this example, <code>Logger</code> is the name of the class, and
					<code>getLogger(...)</code> is the name of the method. So to invoke a
					static method, you don't need an object instance, just the name of the
					class.</p><h2 id="yourfirst" class="ibm-h2">Your first Java class</h2><p> It's time to pull together what you've learned in the previous sections
					and start writing some code. This section walks you through declaring a
					class and adding variables and methods to it using the Eclipse Package
					Explorer. You learn how to use the <code>Logger</code> class to keep an
					eye on your application's behavior, and also how to use a
					<code>main()</code> method as a <span data-widget="tooltip" class="tipso_style ibm-widget-processed">test harness</span>. </p><h3 id="N10608" class="ibm-h3">Creating a package</h3><p>If you're not already there, get to the Package Explorer view (in the Java
					perspective) in Eclipse through <strong>Window &gt; Perspective &gt; Open
						Perspective</strong>. You're going to get set up to create your first
					Java class. The first step is to create a place for the class to live.
					Packages are namespace constructs, and they also conveniently map directly
					to the file system's directory structure.</p><p>Rather than use the default package (almost always a bad idea), you create
					one specifically for the code you are writing. Click <strong>File &gt; New
						&gt; Package</strong> to start the Java Package wizard, shown in
					Figure 4.</p><h5 id="N10618" class="ibm-h5">Figure 4. The Eclipse Java Package wizard</h5><img src="figure4.png" class="ibm-downsize" alt="Screenshot of the Eclipse Package Wizard" height="433" width="550"><p class="ibm-ind-link ibm-hide"><a class="ibm-popup-link" onclick="IBMCore.common.widget.overlay.show('N1061C');return false;" href="#N1061C">View image at full size</a></p><p> Type <code>com.makotojava.intro</code> into the Name text box and click
					<strong>Finish</strong>. You can see the new package created in the
					Package Explorer. </p><h3 id="N10629" class="ibm-h3">Declaring the class</h3><p> You can create a class from the Package Explorer in more than one way, but
					the easiest way is to right-click the package you just created and choose
					<strong>New &gt; Class...</strong>. The New Class dialog box opens. </p><p> In the Name text box, type <code>Person</code> and then click
					<strong>Finish</strong>. </p><p>The new class is displayed in your edit window. I recommend closing a few
					of the views (Problems, Javadoc, and others) that open by default in the
					Java Perspective the first time you open it to make it easier to see your
					source code. (Eclipse remembers that you don't want to see those views the
					next time you open Eclipse and go to the Java perspective.) Figure 5 shows
					a workspace with the essential views open. </p><h5 id="fig5" class="ibm-h5">Figure 5. A well-ordered workspace</h5><img src="figure5.png" class="ibm-downsize" alt="Screenshot of the Eclipse Package wizard's edit window" height="793" width="1024"><p class="ibm-ind-link"><a class="ibm-popup-link" onclick="IBMCore.common.widget.overlay.show('N10642');return false;" href="#N10642">View image at full size</a></p><p> Eclipse generates a shell class for you and includes the
					<code>package</code> statement at the top. You just need to flesh out the
					class now. You can configure how Eclipse generates new classes through
					<strong>Window &gt; Preferences &gt; Java &gt; Code Style &gt; Code
						Templates</strong>. For simplicity, go with Eclipse's out-of-the-box
					code generation. </p><p> In <a href="#fig5">Figure 5</a>, notice the asterisk (*) next to the new
					source-code file name, indicating that I've made a modification. And
					notice that the code is unsaved. Next, notice that I made a mistake when
					declaring the <code>Name</code> attribute: I declared <code>Name</code>'s
					type to be <code>Strin</code>. The compiler could not find a reference to
					such a class and flagged it as a compile error (that's the wavy red line
					underneath <code>Strin</code>). Of course, I can fix my mistake by adding
					a <code>g</code> to the end of <code>Strin</code>. This is a small
					demonstration of the power of using an IDE instead of command-line tools
					for software development. Go ahead and correct the error by changing the
					type to <code>String</code>. </p><h3 id="N1066A" class="ibm-h3">Adding class variables</h3><p> In <a href="#listing3">Listing 3</a>, you began to flesh out the
					<code>Person</code> class, but I didn't explain much of the syntax. Now,
					I'll formally define how to add class variables. </p><p> Recall that a variable has an <code><em>accessSpecifier</em></code>, a
					<code><em>dataType</em></code>, a <code><em>variableName</em></code>, and,
					optionally, an <code><em>initialValue</em></code>. Earlier, you looked
					briefly at how to define the <code><em>accessSpecifier</em></code> and
					<code><em>variableName</em></code>. Now, you see the
					<code><em>dataType</em></code> that a variable can have. </p><p> A <code><em>dataType</em></code> can be either a primitive type or a
					reference to another object. For example, notice that <code>Age</code> is
					an <code>int</code> (a primitive type) and that <code>Name</code> is a
					<code>String</code> (an object). The JDK comes packed full of useful
					classes like <code>java.lang.String</code>, and those in the
					<code>java.lang</code> package do not need to be imported (a shorthand
					courtesy of the Java compiler). But whether the
					<code><em>dataType</em></code> is a JDK class such as <code>String</code>
					or a user-defined class, the syntax is essentially the same. </p><p>Table 1 shows the eight primitive data types you're likely to see on a
					regular basis, including the default values that primitives take on if you
					do not explicitly initialize a member variable's value.</p><h5 id="table1" class="ibm-h5">Table 1. Primitive data types</h5><table border="0" cellpadding="0" cellspacing="0" class="ibm-data-table" summary="Primitive data types and default values." width="100%"><thead xmlns:dw="http://www.ibm.com/developerWorks/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><tr><th scope="col">Type</th><th scope="col">Size</th><th scope="col">Default value</th><th scope="col">Range of values</th></tr></thead><tbody xmlns:dw="http://www.ibm.com/developerWorks/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><tr><td><code>boolean</code></td><td>n/a</td><td>false</td><td>true or
							false</td></tr><tr><td><code>byte</code></td><td>8 bits</td><td>0</td><td>-128 to
							127</td></tr><tr><td><code>char</code></td><td>16
							bits</td><td>(unsigned)</td><td>\u0000' \u0000' to \uffff' or
							0 to 65535</td></tr><tr><td><code>short</code></td><td>16 bits</td><td>0</td><td>-32768 to
							32767</td></tr><tr><td><code>int</code></td><td>32 bits</td><td>0</td><td>-2147483648
							to 2147483647</td></tr><tr><td><code>long</code></td><td>64
							bits</td><td>0</td><td>-9223372036854775808 to
							9223372036854775807</td></tr><tr><td><code>float</code></td><td>32
							bits</td><td>0.0</td><td>1.17549435e-38 to
							3.4028235e+38</td></tr><tr><td><code>double</code></td><td>64
							bits</td><td>0.0</td><td>4.9e-324 to
							1.7976931348623157e+308</td></tr></tbody></table><h3 id="N10720" class="ibm-h3">Built-in logging</h3><p>Before going further into coding, you need to know how your programs tell
					you what they are doing.</p><p> The Java platform includes the <code>java.util.logging</code> package, a
					built-in logging mechanism for gathering program information in a readable
					form. Loggers are named entities that you create through a static method
					call to the <code>Logger</code> class: </p><div class="ibm-syntax-container"><div><div id="highlighter_712427" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">import java.util.logging.Logger;</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">//...</code></div><div class="line number3 index2 alt2"><code class="htmlscript plain">Logger l = Logger.getLogger(getClass().getName());</code></div></div></td></tr></tbody></table></div></div></div><p> When calling the <code>getLogger()</code> method, you pass it a
					<code>String</code>. For now, just get in the habit of passing the name of
					the class that the code you're writing is located in. From any regular
					(that is, nonstatic) method, the preceding code always references the name
					of the class and passes that to the <code>Logger</code>. </p><p> If you are making a <code>Logger</code> call inside of a static method,
					reference the name of the class you're inside of: </p><div class="ibm-syntax-container"><div><div id="highlighter_190904" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">Logger l = Logger.getLogger(Person.class.getName());</code></div></div></td></tr></tbody></table></div></div></div><p> In this example, the code you're inside of is the <code>Person</code>
					class, so you reference a special literal called <code>class</code> that
					retrieves the <code>Class</code> object (more on this later) and gets its
					<code>Name</code> attribute. </p><p> This tutorial's "<a href="#writing">Writing good Java code</a>" section
					includes a tip on how <em>not</em> to do logging. </p><p> Before we get into the meat of testing, first go into the Eclipse
					source-code editor for <code>Person</code> and add this code just after
					<code>public class Person {</code> from <a href="#listing3">Listing 3</a>
					so that it looks like this: </p><div class="ibm-syntax-container"><div><div id="highlighter_255239" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">package com.makotojava.intro;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="htmlscript plain">public class Person {</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">private String name;</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">private int age;</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">private int height;</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">private int weight;</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">private String eyeColor;</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">private String gender;</code></div><div class="line number10 index9 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p> Eclipse has a handy code generator to generate getters and setters (among
					other things). To try out the code generator, put your mouse caret on the
					<code>Person</code> class definition (that is, on the word
					<code>Person</code> in the class definition) and click <strong>Source &gt;
						Generate Getters and Setters...</strong>. When the dialog box opens,
					click <strong>Select All</strong>, as shown in Figure 6. </p><h5 id="N1077B" class="ibm-h5">Figure 6. Eclipse generating getters and
					setters</h5><img src="figure6.png" class="ibm-downsize" alt="Screenshot of Eclipse generating getters and setters" height="636" width="521"><p class="ibm-ind-link ibm-hide"><a class="ibm-popup-link" onclick="IBMCore.common.widget.overlay.show('N1077F');return false;" href="#N1077F">View image at full size</a></p><p> For the insertion point, choose <strong>Last member</strong> and click
					<strong>OK</strong>. </p><p> Now, add a constructor to <code>Person</code> by typing the code from
					Listing 5 into your source window just below the top part of the class
					definition (the line immediately beneath
					<code>public class Person ()</code>). </p><h5 id="listing5" class="ibm-h5">Listing 5. <code>Person</code> constructor </h5><div class="ibm-syntax-container"><div><div id="highlighter_230548" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">public Person(String name, int age, int height, int weight, String eyeColor, String gender) {</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">this.name = name;</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">this.age = age;</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">this.height = height;</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">this.weight = weight;</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">this.eyeColor = eyeColor;</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">this.gender = gender;</code></div><div class="line number8 index7 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>Make sure that you have no wavy lines indicating compile errors.</p><div class="dw-article-sidebar ibm-background-cool-white-20"><p><strong>Using <code>main()</code> as a test harness </strong></p><p><code>main()</code> is a special method that you can include in any
						class so that the JRE can execute its code. A class is not required to
						have a <code>main()</code> method — in fact, most never will
						— and a class can have at most one <code>main()</code> method.
						<code>main()</code> is a handy method to have because it gives you a
						quick test harness for the class. In enterprise development, you would
						use test libraries such as JUnit, but using <code>main()</code> as
						your test harness can be a quick-and-dirty way to create a test
						harness. </p></div><h4 id="N107B9" class="ibm-h4">Generate a JUnit test case</h4><p> Now you generate a JUnit test case where you instantiate a
					<code>Person</code>, using the constructor in Listing 5, and then print
					the state of the object to the console. In this sense, the "test" makes
					sure that the order of the attributes on the constructor call are correct
					(that is, that they are set to the correct attributes). </p><p>In the Package Explorer, right-click your <code>Person</code> class and
					then click <strong>New &gt; JUnit Test Case</strong>. The first page of
					the New JUnit Test Case wizard opens, as shown in Figure 7. </p><h5 id="N107CC" class="ibm-h5">Figure 7. Creating a JUnit test case</h5><img src="figure7.png" class="ibm-downsize" alt="Screenshot of the first dialog box for creating a JUnit test case" height="625" width="550"><p class="ibm-ind-link ibm-hide"><a class="ibm-popup-link" onclick="IBMCore.common.widget.overlay.show('N107D0');return false;" href="#N107D0">View image at full size</a></p><p>Accept the defaults by clicking <strong>Next</strong>. You see the Test
					Methods dialog box, shown in Figure 8. </p><h5 id="N107DB" class="ibm-h5">Figure 8. Select methods for the wizard to generate
					test cases</h5><img src="figure8.jpg" class="ibm-downsize" alt="Screenshot of the Test Methods dialog box for creating a JUnit test case" height="625" width="550"><p class="ibm-ind-link ibm-hide"><a class="ibm-popup-link" onclick="IBMCore.common.widget.overlay.show('N107DF');return false;" href="#N107DF">View image at full size</a></p><p>In this dialog box, you select the method or methods that you want the
					wizard to build tests for. In this case, select just the constructor, as
					shown in Figure 8. Click <strong>Finish</strong>, and Eclipse generates
					the JUnit test case. </p><p> Next, open <code>PersonTest</code>, go into the <code>testPerson()</code>
					method, and make it look like Listing 6. </p><h5 id="listing6" class="ibm-h5">Listing 6. The <code>testPerson()</code> method </h5><div class="ibm-syntax-container"><div><div id="highlighter_145229" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">@Test</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">public void testPerson() {</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">Person p = new Person("Joe Q Author", 42, 173, 82, "Brown", "MALE");</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">Logger l = Logger.getLogger(Person.class.getName());</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Name: " + p.getName());</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Age:" + p.getAge());</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Height (cm):" + p.getHeight());</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Weight (kg):" + p.getWeight());</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Eye Color:" + p.getEyeColor());</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Gender:" + p.getGender());</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">assertEquals("Joe Q Author", p.getName());</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">assertEquals(42, p.getAge());</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">assertEquals(173, p.getHeight());</code></div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">assertEquals(82, p.getWeight());</code></div><div class="line number15 index14 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">assertEquals("Brown", p.getEyeColor());</code></div><div class="line number16 index15 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">assertEquals("MALE", p.getGender());</code></div><div class="line number17 index16 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p> Don't worry about the <code>Logger</code> class for now. Just enter the
					code as you see it in Listing 6. You're now ready to run your first Java
					program (and JUnit test case). </p><h3 id="N107FF" class="ibm-h3">Running your unit test in
					Eclipse</h3><p>In Eclipse, right-click PersonTest.java in the Package Explore and select
					<strong>Run As</strong> &gt; <strong>JUnit Test</strong>. Figure 9
					shows what happens. </p><h5 id="fig9" class="ibm-h5">Figure 9. See <code>Person</code> run </h5><img src="figure9.png" class="ibm-downsize" alt="Screenshot of Eclipse running Person as a Java application" height="796" width="1000"><p class="ibm-ind-link"><a class="ibm-popup-link" onclick="IBMCore.common.widget.overlay.show('N10814');return false;" href="#N10814">View image at full size</a></p><p>The Console view opens automatically to show <code>Logger</code> output,
					and the JUnit view indicates that the test ran without errors.</p><h2 id="N1081E" class="ibm-h2">Adding behavior to a Java class</h2><p><code>Person</code> is looking good so far, but it can use some additional
					behavior to make it more interesting. Creating behavior means adding
					methods. This section looks more closely at <em>accessor
						methods</em>— namely, the getters and setters you've already seen
					in action. </p><h3 id="N1082A" class="ibm-h3">Accessor methods</h3><p>The getters and setters that you saw in action at the end of the preceding
					section are called <em>accessor methods</em>. (Quick review: A getter is a
					method for retrieving the value of an attribute; a setter is a method for
					modifying that value.) To encapsulate a class's data from other objects,
					you declare its variables to be <code>private</code> and then provide
					accessor methods.</p><p>The naming of accessors follows a strict convention known as the
					<em>JavaBeans pattern</em>. In this pattern, any attribute
					<code>Foo</code> has a getter called <code>getFoo()</code> and a setter
					called <code>setFoo()</code>. The JavaBeans pattern is so common that
					support for it is built into the Eclipse IDE, as you saw when you
					generated getters and setters for <code>Person</code>.</p><p>Accessors follow these guidelines:</p><ul class="ibm-bullet-list"><li>The attribute is always declared with <code>private</code>
						access.</li><li>The access specifier for getters and setters is
						<code>public</code>.</li><li>A getter doesn't take any parameters, and it returns a value whose
						type is the same as the attribute it accesses.</li><li>Setters take only one parameter, of the type of the attribute, and do
						not return a value.</li></ul><h3 id="N10859" class="ibm-h3">Declaring accessors</h3><p>By far the easiest way to declare accessors is to let Eclipse do it for
					you. But you also need to know how to hand-code a getter-and-setter
					pair.</p><p>Suppose I have an attribute, <code>Foo</code>, whose type is
					<code>java.lang.String</code>. My complete declaration for
					<code>Foo</code> (following the accessor guidelines) is:</p><div class="ibm-syntax-container"><div><div id="highlighter_174730" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">private String foo;</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">public String getFoo() {</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">return foo;</code></div><div class="line number4 index3 alt1"><code class="htmlscript plain">}</code></div><div class="line number5 index4 alt2"><code class="htmlscript plain">public void setFoo(String value) {</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">foo = value;</code></div><div class="line number7 index6 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>Notice that the parameter value passed to the setter is named differently
					than if it had been Eclipse-generated (where the parameter name would be
					the same as the attribute name — for example,
					<code>public void setFoo(String <strong>foo</strong>)</code>). On the rare
					occasions when I hand-code a setter, I always use <code>value</code> as
					the name of the parameter value to the setter. This eye-catcher —
					my own convention, and one that I recommend to other developers —
					reminds me that I hand-coded the setter. If I don't use Eclipse to
					generate getters and setters for me, I have a good reason. Using
					<code>value</code> as the setter's parameter value reminds me that this
					setter is special. (Code comments can serve the same purpose.)</p><h3 id="N10883" class="ibm-h3">Calling methods</h3><p>Invoking — or <em>calling</em>— methods is easy. The <code>testPerson</code> method in <a href="#listing6">Listing 6</a>, for example, invokes the various
					getters of <code>Person</code> to return their values. Now you'll learn
					the formal mechanics of making method calls.</p><h4 id="N1089A" class="ibm-h4">Method invocation with and without
					parameters</h4><p>To invoke a method on an object, you need a reference to that object.
					Method-invocation syntax comprises:</p><ul class="ibm-bullet-list"><li>The object reference</li><li>A literal dot</li><li>The method name</li><li>Any parameters that need to be passed</li></ul><p>The syntax for a method invocation without parameters is:</p><div class="ibm-syntax-container"><div><div id="highlighter_780926" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">objectReference.someMethod();</code></div></div></td></tr></tbody></table></div></div></div><p>Here's an example:</p><div class="ibm-syntax-container"><div><div id="highlighter_435103" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">Person p = new Person("Joe Q Author", 42, 173, 82, "Brown", "MALE");</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">p.getName();</code></div></div></td></tr></tbody></table></div></div></div><p>The syntax for a method invocation with parameters is:</p><div class="ibm-syntax-container"><div><div id="highlighter_723138" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">objectReference.someOtherMethod(parameter1, parameter2, . . ., parameterN);</code></div></div></td></tr></tbody></table></div></div></div><p>And here's an example (setting the <code>Name</code> attribute of
					<code>Person</code>):</p><div class="ibm-syntax-container"><div><div id="highlighter_965634" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">Person p = new Person("Joe Q Author", 42, 173, 82, "Brown", "MALE");</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">p.setName("Jane Q Author");</code></div></div></td></tr></tbody></table></div></div></div><p>Remember that constructors are methods, too. And you can separate the
					parameters with spaces and newlines. The Java compiler doesn't care. These
					next two method invocations are equivalent:</p><div class="ibm-syntax-container"><div><div id="highlighter_653114" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">new Person("Joe Q Author", 42, 173, 82, "Brown", "MALE");</code></div></div></td></tr></tbody></table></div></div></div><div class="ibm-syntax-container"><div><div id="highlighter_265869" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">new Person("Joe Q Author",// Name</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">42,&nbsp;&nbsp;&nbsp;&nbsp; // Age</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">173,&nbsp;&nbsp;&nbsp; // Height in cm</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">82,&nbsp;&nbsp;&nbsp;&nbsp; // Weight in kg</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">"Brown",// Eye Color</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">"MALE");// Gender</code></div></div></td></tr></tbody></table></div></div></div><p>Notice how the comments in the second constructor invocation make it more
					readable for the next person who might work with this code. At a glance,
					that developer can tell what each parameter is for.</p><h4 id="N108D4" class="ibm-h4">Nested method invocation</h4><p>Method invocations can also be nested:</p><div class="ibm-syntax-container"><div><div id="highlighter_494559" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">Logger l = Logger.getLogger(Person.class.getName());</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">l.info("Name: " + p.getName());</code></div></div></td></tr></tbody></table></div></div></div><p>Here you pass the return value of <code>Person.class.getName()</code> to
					the <code>getLogger()</code> method. Remember that the
					<code>getLogger()</code> method call is a static method call, so its
					syntax differs slightly. (You don't need a <code>Logger</code> reference
					to make the invocation; instead, you use the name of the class as the left
					side of the invocation.)</p><p>That's all there is to method invocation.</p><h2 id="N108EF" class="ibm-h2">Strings and operators</h2><p> The tutorial has so far introduced several variables of type
					<code>String</code>, but without much explanation. You learn more about
					strings in this section, and also find out when and how to use operators. </p><h3 id="N108F8" class="ibm-h3">Strings</h3><div class="dw-article-sidebar ibm-background-cool-white-20"><p>In C, string handling is labor intensive because strings are
						null-terminated arrays of 8-bit characters that you must manipulate.
						The closest Java code gets to the C world with regard to strings is
						the <code>char</code> primitive data type, which can hold a single
						Unicode character, such as <em>a</em>.</p></div><p>In the Java language, strings are first-class objects of type
					<code>String</code>, with methods that help you manipulate them.</p><p>Here are a couple of ways to create a String, using the example of creating
					a <code>String</code> instance named <code>greeting</code> with a value of
					<code>hello</code>:</p><div class="ibm-syntax-container"><div><div id="highlighter_908947" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">greeting = new String("hello");</code></div></div></td></tr></tbody></table></div></div></div><div class="ibm-syntax-container"><div><div id="highlighter_253689" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">String greeting = "hello";</code></div></div></td></tr></tbody></table></div></div></div><p>Because <code>String</code>s are first-class objects, you can use
					<code>new</code> to instantiate them. Setting a variable of type
					<code>String</code> to a string literal has the same result, because the
					Java language creates a <code>String</code> object to hold the literal,
					and then assigns that object to the instance variable.</p><h4 id="N1092C" class="ibm-h4">Concatenating strings</h4><p>You can do many things with <code>String</code>, and the class has many
					helpful methods. Without even using a method, you've already done
					something interesting within the <code>Person</code> class's
					<code>testPerson()</code> method by concatenating, or combining, two
					<code>String</code>s:</p><div class="ibm-syntax-container"><div><div id="highlighter_746119" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">l.info("Name: " + p.getName());</code></div></div></td></tr></tbody></table></div></div></div><p>The plus (<code>+</code>) sign is shorthand for concatenating
					<code>String</code>s in the Java language. (You incur a performance
					penalty for doing this type of concatenation inside a loop, but for now,
					you don't need to worry about that.)</p><h4 id="N1094B" class="ibm-h4">Concatenation exercise</h4><p>Now, you can try concatenating two more <code>String</code>s inside of the
					<code>Person</code> class. At this point, you have a <code>name</code>
					instance variable, but it would be more realistic in a business
					application to have a <code>firstName</code> and <code>lastName</code>.
					You can then concatenate them when another object requests
					<code>Person</code>'s full name.</p><p>Return to your Eclipse project, and start by adding the new instance
					variables (at the same location in the source code where <code>name</code>
					is currently defined):</p><div class="ibm-syntax-container"><div><div id="highlighter_905631" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">//private String name;</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">private String firstName;</code></div><div class="line number3 index2 alt2"><code class="htmlscript plain">private String lastName;</code></div></div></td></tr></tbody></table></div></div></div><p>Comment out the <code>name</code> definition; you don't need it anymore,
					because you're replacing it with <code>firstName</code> and
					<code>lastName</code>.</p><h4 id="N10978" class="ibm-h4">Chaining method calls</h4><p>Now, tell the Eclipse code generator to generate getters and setters for
					<code>firstName</code> and <code>lastName</code> (refer back to the "<a href="#yourfirst">Your first Java class</a>" section if necessary).
					Then, remove the <code>setName()</code> and <code>getName()</code>
					methods, and add a new <code>getFullName()</code> method to look like
					this:</p><div class="ibm-syntax-container"><div><div id="highlighter_842246" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">public String getFullName() {</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">return getFirstName().concat(" ").concat(getLastName());</code></div><div class="line number3 index2 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>This code illustrates <em>chaining</em> of method calls. Chaining is a
					technique commonly used with immutable objects like <code>String</code>,
					where a modification to an immutable object always returns the
					modification (but doesn't change the original). You then operate on the
					returned, changed value.</p><h3 id="N1099E" class="ibm-h3">Operators</h3><p>You've already seen that the Java language uses the <code>=</code> operator
					to assign values to variables. As you might expect, the Java language can
					do arithmetic, and it uses operators for that purpose too. Now, I give you
					a brief look at some of the Java language operators you need as your
					skills improve.</p><p>The Java language uses two types of operators:</p><ul class="ibm-bullet-list"><li><em>Unary</em>: Only one operand is needed. </li><li><em>Binary</em>: Two operands are needed. </li></ul><p>Table 2 summarizes the Java language's arithmetic operators:</p><h5 id="table2" class="ibm-h5">Table 2. Java language's arithmetic operators</h5><div id="DataTables_Table_0_wrapper" class="dataTables_wrapper no-footer"><table border="0" cellpadding="0" cellspacing="0" class="ibm-data-table display dataTable no-footer dtr-inline ibm-widget-processed" data-widget="datatable" id="DataTables_Table_0" role="grid" style="width: 940px;"><thead xmlns:dw="http://www.ibm.com/developerWorks/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><tr role="row"><th scope="col" class="sorting_disabled" rowspan="1" colspan="1" style="width: 133px;">Operator</th><th scope="col" class="sorting_disabled" rowspan="1" colspan="1" style="width: 112px;">Usage</th><th scope="col" class="sorting_disabled" rowspan="1" colspan="1" style="width: 575px;">Description</th></tr></thead><tbody xmlns:dw="http://www.ibm.com/developerWorks/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><tr role="row" class="odd"><td tabindex="0"><code>+</code></td><td><code>a + b</code></td><td>Adds
								<code>a</code> and <code>b</code></td></tr><tr role="row" class="even"><td tabindex="0"><code>+</code></td><td><code>+a</code></td><td>Promotes
								<code>a</code> to <code>int</code> if it's a
								<code>byte</code>, <code>short</code>, or
								<code>char</code></td></tr><tr role="row" class="odd"><td tabindex="0"><code>-</code></td><td><code>a - b</code></td><td>Subtracts
								<code>b</code> from <code>a</code></td></tr><tr role="row" class="even"><td tabindex="0"><code>-</code></td><td><code>-a</code></td><td>Arithmetically
								negates <code>a</code></td></tr><tr role="row" class="odd"><td tabindex="0"><code>*</code></td><td><code>a * b</code></td><td>Multiplies
								<code>a</code> and <code>b</code></td></tr><tr role="row" class="even"><td tabindex="0"><code>/</code></td><td><code>a / b</code></td><td>Divides
								<code>a</code> by <code>b</code></td></tr><tr role="row" class="odd"><td tabindex="0"><code>%</code></td><td><code>a % b</code></td><td>Returns the
								remainder of dividing <code>a</code> by <code>b</code> (the
								modulus operator) </td></tr><tr role="row" class="even"><td tabindex="0"><code>++</code></td><td><code>a++</code></td><td>Increments
								<code>a</code> by 1; computes the value of <code>a</code>
								before incrementing </td></tr><tr role="row" class="odd"><td tabindex="0"><code>++</code></td><td><code>++a</code></td><td>Increments
								<code>a</code> by 1; computes the value of <code>a</code>
								after incrementing </td></tr><tr role="row" class="even"><td tabindex="0"><code>--</code></td><td><code>a--</code></td><td>Decrements
								<code>a</code> by 1; computes the value of <code>a</code>
								before decrementing </td></tr><tr role="row" class="odd"><td tabindex="0"><code>--</code></td><td><code>--a</code></td><td>Decrements
								<code>a</code> by 1; computes the value of <code>a</code>
								after decrementing </td></tr><tr role="row" class="even"><td tabindex="0"><code>+=</code></td><td><code>a += b</code></td><td>Shorthand
								for <code>a = a + b</code></td></tr><tr role="row" class="odd"><td tabindex="0"><code>-=</code></td><td><code>a -= b</code></td><td>Shorthand
								for <code>a = a - b</code></td></tr><tr role="row" class="even"><td tabindex="0"><code>*=</code></td><td><code>a *= b</code></td><td>Shorthand
								for <code>a = a * b</code></td></tr><tr role="row" class="odd"><td tabindex="0"><code>%=</code></td><td><code>a %= b</code></td><td>Shorthand
								for <code>a = a % b</code></td></tr></tbody></table></div><h5 id="N10A9B" class="ibm-h5">Additional operators</h5><p>In addition to the operators in Table 2, you've seen several other symbols
					that are called operators in the Java language, including:</p><ul class="ibm-bullet-list"><li>Period (<code>.</code>), which qualifies names of packages and invokes
						methods </li><li>Parentheses (<code>()</code>), which delimit a comma-separated list of
						parameters to a method </li><li><code>new</code>, which (when followed by a constructor name)
						instantiates an object </li></ul><p>The Java language syntax also includes several operators that are used
					specifically for conditional programming — that is, programs that
					respond differently based on different input. You look at those in the
					next section.</p><h2 id="N10AB5" class="ibm-h2">Conditional operators and control
					statements</h2><p>In this section, you learn about the various statements and operators you
					can use to tell your Java programs how you want them to act based on
					different input.</p><h3 id="N10ABB" class="ibm-h3">Relational and conditional
					operators</h3><p>The Java language gives you operators and control statements that you can
					use to make decisions in your code. Most often, a decision in code starts
					with a <em>Boolean expression</em>— that is, one that evaluates to either <code>true</code> or
					<code>false</code>. Such expressions use <em>relational operators</em>,
					which compare one operand to another, and <em>conditional
						operators</em>.</p><p>Table 3 lists the relational and conditional operators of the Java
					language.</p><h5 id="table3" class="ibm-h5">Table 3. Relational and conditional operators</h5><table border="0" cellpadding="0" cellspacing="0" class="ibm-data-table"><thead xmlns:dw="http://www.ibm.com/developerWorks/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><tr><th scope="col">Operator</th><th scope="col">Usage</th><th scope="col">Returns true if...</th></tr></thead><tbody xmlns:dw="http://www.ibm.com/developerWorks/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><tr><td><code>&gt;</code></td><td><code>a &gt; b</code></td><td><code>a</code>
							is greater than <code>b</code></td></tr><tr><td><code>&gt;=</code></td><td><code>a &gt;= b</code></td><td><code>a</code>
							is greater than or equal to <code>b</code></td></tr><tr><td><code>&lt;</code></td><td><code>a &lt; b</code></td><td><code>a</code>
							is less than <code>b</code></td></tr><tr><td><code>&lt;=</code></td><td><code>a &lt;= b</code></td><td><code>a</code>
							is less than or equal to <code>b</code></td></tr><tr><td><code>==</code></td><td><code>a == b</code></td><td><code>a</code>
							is equal to <code>b</code></td></tr><tr><td><code>!=</code></td><td><code>a != b</code></td><td><code>a</code>
							is not equal to <code>b</code></td></tr><tr><td><code>&amp;&amp;</code></td><td><code>a &amp;&amp; b</code></td><td><code>a</code>
							and <code>b</code> are both true, conditionally evaluates
							<code>b</code> (if <code>a</code> is false, <code>b</code> is
							not evaluated) </td></tr><tr><td><code>||</code></td><td><code>a || b</code></td><td><code>a</code>
							or <code>b</code> is true, conditionally evaluates
							<code>b</code> (if <code>a</code> is true, <code>b</code> is
							not evaluated) </td></tr><tr><td><code>!</code></td><td><code>!a</code></td><td><code>a</code>
							is false </td></tr><tr><td><code>&amp;</code></td><td><code>a &amp; b</code></td><td><code>a</code>
							and <code>b</code> are both true, always evaluates
							<code>b</code></td></tr><tr><td><code>|</code></td><td><code>a | b</code></td><td><code>a</code>
							or <code>b</code> is true, always evaluates
							<code>b</code></td></tr><tr><td><code>^</code></td><td><code>a ^ b</code></td><td><code>a</code>
							and <code>b</code> are different </td></tr></tbody></table><h3 id="N10B9D" class="ibm-h3"> The if statement </h3><p>Now that you have a bunch of operators, it's time to use them. This code
					shows what happens when you add some logic to the <code>Person</code>
					object's <code>getHeight()</code> accessor:</p><div class="ibm-syntax-container"><div><div id="highlighter_87903" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">public int getHeight() {</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">int ret = height;</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">// If locale of the computer this code is running on is U.S.,</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">if (Locale.getDefault().equals(Locale.US))</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">ret /= 2.54;// convert from cm to inches</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">return ret;</code></div><div class="line number7 index6 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>If the current locale is in the United States (where the metric system
					isn't in use), it might make sense to convert the internal value of
					<code>height</code> (in centimeters) to inches. This (somewhat contrived)
					example illustrates the use of the <code>if</code> statement, which
					evaluates a Boolean expression inside parentheses. If that expression
					evaluates to <code>true</code>, the program executes the next
					statement.</p><p>In this case, you only need to execute one statement if the
					<code>Locale</code> of the computer the code is running on is
					<code>Locale.US</code>. If you need to execute more than one statement,
					you can use curly braces to form a <em>compound statement</em>. A compound
					statement groups many statements into one — and compound statements
					can also contain other compound statements.</p><h3 id="N10BC6" class="ibm-h3">Variable scope</h3><p>Every variable in a Java application has <em>scope</em>, or localized
					namespace, where you can access it by name within the code. Outside that
					space the variable is <em>out of scope</em>, and you get a compile error
					if you try to access it. Scope levels in the Java language are defined by
					where a variable is declared, as shown in Listing 7.</p><h5 id="listing7" class="ibm-h5">Listing 7. Variable scope</h5><div class="ibm-syntax-container"><div><div id="highlighter_560582" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">public class SomeClass {</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">private String someClassVariable;</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">public void someMethod(String someParameter) {</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">String someLocalVariable = "Hello";</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">if (true) {</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">String someOtherLocalVariable = "Howdy";</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">someClassVariable = someParameter; // legal</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">someLocalVariable = someClassVariable; // also legal</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">someOtherLocalVariable = someLocalVariable;// Variable out of scope!</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">public void someOtherMethod() {</code></div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">someLocalVariable = "Hello there";// That variable is out of scope!</code></div><div class="line number15 index14 alt2">&nbsp;</div><div class="line number16 index15 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number17 index16 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>Within <code>SomeClass</code>, <code>someClassVariable</code> is accessible
					by all instance (that is, nonstatic) methods. Within
					<code>someMethod</code>, <code>someParameter</code> is visible, but
					outside of that method it isn't, and the same is true for
					<code>someLocalVariable</code>. Within the <code>if</code> block,
					<code>someOtherLocalVariable</code> is declared, and outside of that
					<code>if</code> block it's out of scope. For this reason, we say that Java
					has <em>block scope</em>, because blocks (delimited by <code>{</code> and
					<code>}</code>) define the scope boundaries.</p><p>Scope has many rules, but <a href="#listing7">Listing 7</a> shows the most
					common ones. Take a few minutes to familiarize yourself with them.</p><h3 id="N10C03" class="ibm-h3"> The else statement</h3><p>Sometimes in a program's control flow, you want to take action only if a
					particular expression fails to evaluate to <code>true</code>. That's when
					<code>else</code> comes in handy:</p><div class="ibm-syntax-container"><div><div id="highlighter_308274" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">public int getHeight() {</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">int ret;</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">if (gender.equals("MALE"))</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">ret = height + 2;</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">else {</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">ret = height;</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Logger.getLogger("Person").info("Being honest about height...");</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">return ret;</code></div><div class="line number10 index9 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>The <code>else</code> statement works the same way as <code>if</code>, in
					that the program executes only the next statement that it encounters. In
					this case, two statements are grouped into a compound statement (notice
					the curly braces), which the program then executes.</p><p>You can also use <code>else</code> to perform an additional <code>if</code>
					check:</p><div class="ibm-syntax-container"><div><div id="highlighter_713221" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">if (conditional) {</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">// Block 1</code></div><div class="line number3 index2 alt2"><code class="htmlscript plain">} else if (conditional2) {</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">// Block 2</code></div><div class="line number5 index4 alt2"><code class="htmlscript plain">} else if (conditional3) {</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">// Block 3</code></div><div class="line number7 index6 alt2"><code class="htmlscript plain">} else {</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">// Block 4</code></div><div class="line number9 index8 alt2"><code class="htmlscript plain">} // End</code></div></div></td></tr></tbody></table></div></div></div><p>If <code><em>conditional</em></code> evaluates to <code>true</code>,
					<code><em>Block 1</em></code> is executed and the program jumps to the
					next statement after the final curly brace (which is indicated by
					<code>// End</code>). If <code><em>conditional</em></code> does
					<strong>not</strong> evaluate to <code>true</code>, then
					<code><em>conditional2</em></code> is evaluated. If
					<code><em>conditional2</em></code> is true, then
					<code><em>Block 2</em></code> is executed, and the program jumps to the
					next statement after the final curly brace. If
					<code><em>conditional2</em></code> is not true, then the program moves on
					to <code><em>conditional3</em></code>, and so on. Only if all three
					conditionals fail is <code><em>Block 4</em></code> executed.</p><h3 id="N10C5A" class="ibm-h3">The ternary operator</h3><p>The Java language provides a handy operator for doing simple
					<code>if</code> / <code>else</code> statement checks. This operator's
					syntax is:</p><div class="ibm-syntax-container"><div><div id="highlighter_241640" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">(conditional) ? statementIfTrue : statementIfFalse;</code></div></div></td></tr></tbody></table></div></div></div><p>If <code><em>conditional</em></code> evaluates to <code>true</code>,
					<code><em>statementIfTrue</em></code> is executed; otherwise,
					<code><em>statementIfFalse</em></code> is executed. Compound statements
					are not allowed for either statement.</p><p>The ternary operator comes in handy when you know that you need to execute
					one statement as the result of the conditional evaluating to
					<code>true</code>, and another if it doesn't. Ternary operators are most
					often used to initialize a variable (such as a return value), like so:</p><div class="ibm-syntax-container"><div><div id="highlighter_169111" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">public int getHeight() {</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">return (gender.equals("MALE")) ? (height + 2) : height;</code></div><div class="line number3 index2 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>The parentheses following the question mark aren't strictly required, but
					they do make the code more readable.</p><h2 id="N10C87" class="ibm-h2">Loops</h2><p> In addition to being able to apply conditions to your programs and see
					different outcomes based on various <code>if</code>/<code>then</code>
					scenarios, you sometimes want your code to do the same thing over and over
					again until the job is done. In this section, learn about constructs used
					to iterate over code or execute it more than once. </p><h3 id="N10C93" class="ibm-h3">What is a loop?</h3><p>A loop is a programming construct that executes repeatedly while a specific
					condition (or set of conditions) is met. For instance, you might ask a
					program to read all records until the end of a data file, or to process
					each element of an array in turn. (You'll learn about arrays in the next
					section.)</p><p>Three loop constructs make it possible to iterate over code or execute it
					more than once:</p><ul class="ibm-bullet-list"><li><code>for</code> loops</li><li><code>while</code> loops</li><li><code>do</code>...<code>while</code> loops</li></ul><h4 id="N10CAC" class="ibm-h4">for loops</h4><p>The basic loop construct in the Java language is the <code>for</code>
					statement. You can use a <code>for</code> statement to iterate over a
					range of values to determine how many times to execute a loop. The
					abstract syntax for a <code>for</code> loop is:</p><div class="ibm-syntax-container"><div><div id="highlighter_653802" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">for (initialization; loopWhileTrue; executeAtBottomOfEachLoop) {</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">statementsToExecute</code></div><div class="line number3 index2 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>At the <em>beginning</em> of the loop, the initialization statement is
					executed (multiple initialization statements can be separated by commas).
					Provided that <code><em>loopWhileTrue</em></code> (a Java conditional
					expression that must evaluate to either <code>true</code> or
					<code>false</code>) is true, the loop executes. At the <em>bottom</em> of
					the loop, <code><em>executeAtBottomOfEachLoop</em></code> executes.</p><p>For example, if you wanted the code in the <code>main()</code> method in
					Listing 8 to execute three times, you can use a <code>for</code> loop.</p><h5 id="listing8" class="ibm-h5">Listing 8. A <code>for</code> loop</h5><div class="ibm-syntax-container"><div><div id="highlighter_113171" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2 highlighted">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2 highlighted">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">public static void main(String[] args) {</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">Logger l = Logger.getLogger(Person.class.getName());</code></div><div class="line number3 index2 alt2 highlighted"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">for (int aa = 0; aa &lt; 3; aa++) </code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Person p = new Person("Joe Q Author", 42, 173, 82, "Brown", "MALE");</code></div><div class="line number5 index4 alt2 highlighted"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Loop executing iteration# " + aa);</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Name: " + p.getName());</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Age:" + p.getAge());</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Height (cm):" + p.getHeight());</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Weight (kg):" + p.getWeight());</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Eye Color:" + p.getEyeColor());</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Gender:" + p.getGender());</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number13 index12 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>The local variable <code>aa</code> is initialized to zero at the beginning
					of Listing 8. This statement executes only once, when the loop is
					initialized. The loop then continues three times, and each time
					<code>aa</code> is incremented by one.</p><p>You'll see in the next section that an alternative <code>for</code> loop
					syntax is available for looping over constructs that implement the
					<code>Iterable</code> interface (such as arrays and other Java utility
					classes). For now, just note the use of the <code>for</code> loop syntax
					in <a href="#listing8">Listing 8</a>.</p><h4 id="N10CFF" class="ibm-h4">while loops</h4><p>The syntax for a <code>while</code> loop is:</p><div class="ibm-syntax-container"><div><div id="highlighter_999559" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">while (condition) {</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">statementsToExecute</code></div><div class="line number3 index2 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>As you might suspect, if <em>condition</em> evaluates to <code>true</code>,
					the loop executes. At the top of each iteration (that is, before any
					statements execute), the condition is evaluated. If the condition
					evaluates to <code>true</code>, the loop executes. So it's possible that a
					<code>while</code> loop will never execute if its conditional expression
					is not true at least once.</p><p>Look again at the <code>for</code> loop in <a href="#listing8">Listing
						8</a>. For comparison, Listing 9 uses a <code>while</code> loop to
					obtain the same result.</p><h5 id="listing9" class="ibm-h5">Listing 9. A <code>while</code> loop</h5><div class="ibm-syntax-container"><div><div id="highlighter_57435" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2 highlighted">3</div><div class="line number4 index3 alt1 highlighted">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1 highlighted">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2 highlighted">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">public static void main(String[] args) {</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">Logger l = Logger.getLogger(Person.class.getName());</code></div><div class="line number3 index2 alt2 highlighted"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">int aa = 0;</code></div><div class="line number4 index3 alt1 highlighted"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">while (aa &lt; 3) {</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Person p = new Person("Joe Q Author", 42, 173, 82, "Brown", "MALE");</code></div><div class="line number6 index5 alt1 highlighted"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Loop executing iteration# " + aa);</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Name: " + p.getName());</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Age:" + p.getAge());</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Height (cm):" + p.getHeight());</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Weight (kg):" + p.getWeight());</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Eye Color:" + p.getEyeColor());</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Gender:" + p.getGender());</code></div><div class="line number13 index12 alt2 highlighted"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">aa++;</code></div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number15 index14 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>As you can see, a <code>while</code> loop requires a bit more housekeeping
					than a <code>for</code> loop. You must initialize the <code>aa</code>
					variable and also remember to increment it at the bottom of the loop.</p><h4 id="N10D3C" class="ibm-h4">do...while loops</h4><p>If you want a loop that always executes once and <em>then</em> checks its
					conditional expression, you can use a <code>do...while</code> loop, as
					shown in Listing 10.</p><h5 id="listing10" class="ibm-h5">Listing 10. A <code>do...while</code> loop</h5><div class="ibm-syntax-container"><div><div id="highlighter_795359" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2 highlighted">1</div><div class="line number2 index1 alt1 highlighted">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1 highlighted">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2 highlighted">11</div><div class="line number12 index11 alt1 highlighted">12</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2 highlighted"><code class="htmlscript plain">int aa = 0;</code></div><div class="line number2 index1 alt1 highlighted"><code class="htmlscript plain">do {</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">Person p = new Person("Joe Q Author", 42, 173, 82, "Brown", "MALE");</code></div><div class="line number4 index3 alt1 highlighted"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Loop executing iteration# " + aa);</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Name: " + p.getName());</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Age:" + p.getAge());</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Height (cm):" + p.getHeight());</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Weight (kg):" + p.getWeight());</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Eye Color:" + p.getEyeColor());</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Gender:" + p.getGender());</code></div><div class="line number11 index10 alt2 highlighted"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">aa++;</code></div><div class="line number12 index11 alt1 highlighted"><code class="htmlscript plain">} while (aa &lt; 3);</code></div></div></td></tr></tbody></table></div></div></div><p>The conditional expression (<code>aa &lt; 3</code>) is not checked until
					the end of the loop.</p><h3 id="N10D58" class="ibm-h3">Loop termination</h3><p>At times, you need to bail out of — or <em>terminate</em>— a loop before the conditional expression evaluates to
					<code>false</code>. This situation can occur if you're searching an array
					of <code>String</code>s for a particular value, and once you find it, you
					don't care about the other elements of the array. For the times when you
					want to bail, the Java language provides the <code>break</code> statement,
					shown in Listing 11. </p><h5 id="listing11" class="ibm-h5">Listing 11. A <code>break</code> statement</h5><div class="ibm-syntax-container"><div><div id="highlighter_580526" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1 highlighted">4</div><div class="line number5 index4 alt2 highlighted">5</div><div class="line number6 index5 alt1 highlighted">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">public static void main(String[] args) {</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">Logger l = Logger.getLogger(Person.class.getName());</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">int aa = 0;</code></div><div class="line number4 index3 alt1 highlighted"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">while (aa &lt; 3) {</code></div><div class="line number5 index4 alt2 highlighted"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">if (aa == 1)</code></div><div class="line number6 index5 alt1 highlighted"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">break;</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Person p = new Person("Joe Q Author", 42, 173, 82, "Brown", "MALE");</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Loop executing iteration# " + aa);</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Name: " + p.getName());</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Age:" + p.getAge());</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Height (cm):" + p.getHeight());</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Weight (kg):" + p.getWeight());</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Eye Color:" + p.getEyeColor());</code></div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Gender:" + p.getGender());</code></div><div class="line number15 index14 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">aa++;</code></div><div class="line number16 index15 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number17 index16 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>The <code>break</code> statement takes you to the next executable statement
					outside of the loop in which it's located.</p><h3 id="N10D7D" class="ibm-h3">Loop continuation</h3><p>In the (simplistic) example in <a href="#listing11">Listing 11</a>, you
					want to execute the loop only once and then bail. You can also skip a
					single iteration of a loop but continue executing the loop. For that
					purpose, you need the <code>continue</code> statement, shown in Listing
					12.</p><h5 id="listing12" class="ibm-h5">Listing 12. A <code>continue</code> statement</h5><div class="ibm-syntax-container"><div><div id="highlighter_831020" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2 highlighted">5</div><div class="line number6 index5 alt1 highlighted">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">public static void main(String[] args) {</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">Logger l = Logger.getLogger(Person.class.getName());</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">int aa = 0;</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">while (aa &lt; 3) {</code></div><div class="line number5 index4 alt2 highlighted"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">aa++;</code></div><div class="line number6 index5 alt1 highlighted"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">if (aa == 2)</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">continue;</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Person p = new Person("Joe Q Author", 42, 173, 82, "Brown", "MALE");</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Loop executing iteration# " + aa);</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Name: " + p.getName());</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Age:" + p.getAge());</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Height (cm):" + p.getHeight());</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Weight (kg):" + p.getWeight());</code></div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Eye Color:" + p.getEyeColor());</code></div><div class="line number15 index14 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Gender:" +</code></div><div class="line number16 index15 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">p.getGender());</code></div><div class="line number17 index16 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number18 index17 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>In Listing 12, you skip the second iteration of a loop but continue to the
					third. <code>continue</code> comes in handy when you are, say, processing
					records and come across a record you don't want to process. You can skip
					that record and move on to the next one.</p><h2 id="N10D9A" class="ibm-h2">Java Collections</h2><p>Most real-world applications deal with collections of things like files,
					variables, records from files, or database result sets. The Java language
					has a sophisticated Collections Framework that you can use to create and
					manage collections of objects of various types. This section introduces
					you to the most commonly used collection classes and gets you started with
					using them.</p><h3 id="N10DA0" class="ibm-h3">Arrays</h3><div class="dw-article-sidebar ibm-background-cool-white-20"><p><strong>Note</strong>: The square brackets in this section's code
						examples are part of the required syntax for Java arrays,
						<strong>not</strong> indicators of optional elements.</p></div><p>Most programming languages include the concept of an <em>array</em> to hold
					a collection of things, and the Java language is no exception. An array is
					basically a collection of elements of the same type.</p><p>You can declare an array in one of two ways:</p><ul class="ibm-bullet-list"><li>Create the array with a certain size, which is fixed for the life of
						the array.</li><li>Create the array with a certain set of initial values. The size of
						this set determines the size of the array — it's exactly large
						enough to hold all of those values, and its size is fixed for the life
						of the array.</li></ul><h4 id="N10DBB" class="ibm-h4">Declaring an array</h4><p>In general, you declare an array like this:</p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_915262" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">new elementType [arraySize]</code></div></div></td></tr></tbody></table></div></div></div></span><p>You can create an integer array of elements in two ways. This statement
					creates an array that has space for five elements but is empty:</p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_657230" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">// creates an empty array of 5 elements:</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">int[] integers = new int[5];</code></div></div></td></tr></tbody></table></div></div></div></span><p>This statement creates the array and initializes it all at once:</p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_737864" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">// creates an array of 5 elements with values:</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">int[] integers = new int[] { 1, 2, 3, 4, 5 };</code></div></div></td></tr></tbody></table></div></div></div></span><p>or</p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_853411" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">// creates an array of 5 elements with values (without the new operator):</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">int[] integers = { 1, 2, 3, 4, 5 };</code></div></div></td></tr></tbody></table></div></div></div></span><p>The initial values go between the curly braces and are separated by
					commas.</p><p>Another way to create an array is to create it and then code a loop to
					initialize it:</p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_526831" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">int[] integers = new int[5];</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">for (int aa = 0; aa &lt; integers.length; aa++) {</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">integers[aa] = aa+1;</code></div><div class="line number4 index3 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><p>The preceding code declares an integer array of five elements. If you try
					to put more than five elements in the array, the Java runtime will throw
					an <em>exception</em>. You'll learn about exceptions and how to handle
					them in <a href="http://www.ibm.com/developerworks/java/tutorials/j-introtojava2/index.html">Part 2</a>.</p><h4 id="N10DEE" class="ibm-h4">Loading an array</h4><p>To load the array, you loop through the integers from 1 through the length
					of the array (which you get by calling <code>.length</code> on the array
					— more about that in a minute). In this case, you stop when you hit
					5.</p><p>Once the array is loaded, you can access it as before:</p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_895493" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">Logger l = Logger.getLogger("Test");</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">for (int aa = 0; aa &lt; integers.length; aa++) {</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("This little integer's value is: " + integers[aa]);</code></div><div class="line number4 index3 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><p>This syntax also works, and (because it's simpler to work with) I use it
					throughout this section:</p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_566670" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">Logger l = Logger.getLogger("Test");</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">for (int i : integers) {</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("This little integer's value is: " + i);</code></div><div class="line number4 index3 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><h4 id="N10E08" class="ibm-h4">The element index</h4><p>Think of an array as a series of buckets, and into each bucket goes an
					element of a certain type. Access to each bucket is gained via an element
					<em>index</em>:</p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_903559" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">element = arrayName [elementIndex];</code></div></div></td></tr></tbody></table></div></div></div></span><p>To access an element, you need the reference to the array (its name) and
					the index that contains the element that you want.</p><h4 id="N10E19" class="ibm-h4"> The length attribute </h4><p>Every array has a <code>length</code> attribute, which has
					<code>public</code> visibility, that you can use to find out how many
					elements can fit in the array. To access this attribute, use the array
					reference, a dot (.), and the word length, like this:</p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_726936" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">int arraySize = arrayName.length;</code></div></div></td></tr></tbody></table></div></div></div></span><p>Arrays in the Java language are <em>zero-based</em>. That is, for any
					array, the first element in the array is always at
					<code><em>arrayName</em>[0]</code>, and the last is at
					<code><em>arrayName</em>[<em>arrayName</em>.length - 1]</code>.</p><h4 id="N10E3D" class="ibm-h4">An array of objects</h4><p>You've seen how arrays can hold primitive types, but it's worth mentioning
					that they can also hold objects. Creating an array of
					<code>java.lang.Integer</code> objects isn't much different from creating
					an array of primitive types and, again, you can do it in two ways:</p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_816284" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">// creates an empty array of 5 elements:</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">Integer[] integers = new Integer[5];</code></div></div></td></tr></tbody></table></div></div></div></span><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_568373" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">// creates an array of 5 elements with values:</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">Integer[] integers = new Integer[] {</code></div><div class="line number3 index2 alt2"><code class="htmlscript plain">Integer.valueOf(1),</code></div><div class="line number4 index3 alt1"><code class="htmlscript plain">Integer.valueOf(2),</code></div><div class="line number5 index4 alt2"><code class="htmlscript plain">Integer.valueOf(3),</code></div><div class="line number6 index5 alt1"><code class="htmlscript plain">Integer.valueOf(4),</code></div><div class="line number7 index6 alt2"><code class="htmlscript plain">Integer.valueOf(5)</code></div><div class="line number8 index7 alt1"><code class="htmlscript plain">};</code></div></div></td></tr></tbody></table></div></div></div></span><h3 id="N10E51" class="ibm-h3">Boxing and unboxing</h3><p>Every primitive type in the Java language has a JDK counterpart class, as
					shown in Table 4.</p><h5 id="table4" class="ibm-h5">Table 4. Primitives and JDK counterparts</h5><table border="0" cellpadding="0" cellspacing="0" class="ibm-data-table"><thead xmlns:dw="http://www.ibm.com/developerWorks/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><tr><th scope="col">Primitive</th><th scope="col">JDK counterpart</th></tr></thead><tbody xmlns:dw="http://www.ibm.com/developerWorks/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><tr><td><code>boolean</code></td><td><code>java.lang.Boolean</code></td></tr><tr><td><code>byte</code></td><td><code>java.lang.Byte</code></td></tr><tr><td><code>char</code></td><td><code>java.lang.Character</code></td></tr><tr><td><code>short</code></td><td><code>java.lang.Short</code></td></tr><tr><td><code>int</code></td><td><code>java.lang.Integer</code></td></tr><tr><td><code>long</code></td><td><code>java.lang.Long</code></td></tr><tr><td><code>float</code></td><td><code>java.lang.Float</code></td></tr><tr><td><code>double</code></td><td><code>java.lang.Double</code></td></tr></tbody></table><p>Each JDK class provides methods to parse and convert from its internal
					representation to a corresponding primitive type. For example, this code
					converts the decimal value 238 to an <code>Integer</code>:</p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_384310" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">int value = 238;</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">Integer boxedValue = Integer.valueOf(value);</code></div></div></td></tr></tbody></table></div></div></div></span><p>This technique is known as <em>boxing</em>, because you're putting the
					primitive into a wrapper, or box.</p><p>Similarly, to convert the <code>Integer</code> representation back to its
					<code>int</code> counterpart, you <em>unbox</em> it:</p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_536619" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">Integer boxedValue = Integer.valueOf(238);</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">int intValue = boxedValue.intValue();</code></div></div></td></tr></tbody></table></div></div></div></span><h4 id="N10EC0" class="ibm-h4">Autoboxing and auto-unboxing</h4><p>Strictly speaking, you don't need to box and unbox primitives explicitly.
					Instead, you can use the Java language's autoboxing and auto-unboxing
					features:</p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_718153" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">int intValue = 238;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="htmlscript plain">Integer boxedValue = intValue;</code></div><div class="line number4 index3 alt1"><code class="htmlscript plain">//</code></div><div class="line number5 index4 alt2"><code class="htmlscript plain">intValue = boxedValue;</code></div></div></td></tr></tbody></table></div></div></div></span><p>I recommend that you avoid autoboxing and auto-unboxing, however, because
					it can lead to code-readability issues. The code in the boxing and
					unboxing snippets is more obvious, and thus more readable, than the
					autoboxed code; I believe that's worth the extra effort.</p><h4 id="N10ECE" class="ibm-h4">Parsing and converting boxed
					types</h4><p>You've seen how to obtain a boxed type, but what about parsing a numeric
					<code>String</code> that you suspect has a boxed type into its correct
					box? The JDK wrapper classes have methods for that, too:</p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_490190" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">String characterNumeric = "238";</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">Integer convertedValue = Integer.parseInt(characterNumeric);</code></div></div></td></tr></tbody></table></div></div></div></span><p>You can also convert the contents of a JDK wrapper type to a
					<code>String</code>:</p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_240561" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">Integer boxedValue = Integer.valueOf(238);</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">String characterNumeric = boxedValue.toString();</code></div></div></td></tr></tbody></table></div></div></div></span><p>Note that when you use the concatenation operator in a <code>String</code>
					expression (you've already seen this in calls to <code>Logger</code>), the
					primitive type is autoboxed, and wrapper types automatically have
					<code>toString()</code> invoked on them. Pretty handy.</p><h3 id="N10EF2" class="ibm-h3">Lists</h3><p>A <code>List</code> is an ordered collection, also known as a
					<em>sequence</em>. Because a <code>List</code> is ordered, you have
					complete control over where in the <code>List</code> items go. A Java
					<code>List</code> collection can only hold objects (not primitive types
					like <code>int</code>), and it defines a strict contract about how it
					behaves.</p><p><code>List</code> is an interface, so you can't instantiate it directly.
					(You'll learn about interfaces in <a href="http://www.ibm.com/developerworks/java/tutorials/j-introtojava2/index.html">Part 2</a>.) You'll work here with its most commonly used
					implementation, <code>ArrayList</code>. You can make the declaration in
					two ways. The first uses the explicit syntax:</p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_974469" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">List&lt;</code><code class="htmlscript plain">String</code><code class="htmlscript plain">&gt; listOfStrings = new ArrayList&lt;</code><code class="htmlscript plain">String</code><code class="htmlscript plain">&gt;();</code></div></div></td></tr></tbody></table></div></div></div></span><p>The second way uses the "diamond" operator (introduced in JDK 7):</p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_603471" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">List&lt;</code><code class="htmlscript plain">String</code><code class="htmlscript plain">&gt; listOfStrings = new ArrayList&lt;&gt;();</code></div></div></td></tr></tbody></table></div></div></div></span><p>Notice that the type of the object in the <code>ArrayList</code>
					instantiation isn't specified. This is the case because the type of the
					class on the right side of the expression must match that of the left
					side. Throughout the remainder of this tutorial, I use both types, because
					you're likely to see both usages in practice.</p><p>Note that I assigned the <code>ArrayList</code> object to a variable of
					type <code>List</code>. With Java programming, you can assign a variable
					of one type to another, provided the variable being assigned to is a
					superclass or interface implemented by the variable being assigned from.
					In a later section, you'll look more at the rules governing these types of
					variable assignments.</p><h4 id="N10F2F" class="ibm-h4">Formal type</h4><p>The <code>&lt;Object&gt;</code> in the preceding code snippet is called the
					<em>formal type</em>. <code>&lt;Object&gt;</code> tells the compiler
					that this <code>List</code> contains a collection of type
					<code>Object</code>, which means you can pretty much put whatever you like
					in the <code>List</code>.</p><p>If you want to tighten up the constraints on what can or cannot go into the
					<code>List</code>, you can define the formal type differently:</p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_189107" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">List&lt;</code><code class="htmlscript plain">Person</code><code class="htmlscript plain">&gt; listOfPersons = new ArrayList&lt;</code><code class="htmlscript plain">Person</code><code class="htmlscript plain">&gt;();</code></div></div></td></tr></tbody></table></div></div></div></span><p>Now your <code>List</code> can only hold <code>Person</code> instances.</p><h4 id="N10F5A" class="ibm-h4">Using lists </h4><p>Using <code>List</code>s — like using Java collections in general
					— is super easy. Here are some of the things you can do with
					<code>List</code>s:</p><ul class="ibm-bullet-list"><li>Put something in the <code>List</code>. </li><li>Ask the <code>List</code> how big it currently is. </li><li>Get something out of the <code>List</code>. </li></ul><p>To put something in a <code>List</code>, call the <code>add()</code>
					method:</p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_711615" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">List&lt;</code><code class="htmlscript plain">Integer</code><code class="htmlscript plain">&gt; listOfIntegers = new ArrayList&lt;&gt;();</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">listOfIntegers.add(Integer.valueOf(238));</code></div></div></td></tr></tbody></table></div></div></div></span><p>The <code>add()</code> method adds the element to the end of the
					<code>List</code>.</p><p>To ask the <code>List</code> how big it is, call <code>size()</code>:</p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_371666" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">List&lt;</code><code class="htmlscript plain">Integer</code><code class="htmlscript plain">&gt; listOfIntegers = new ArrayList&lt;&gt;();</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="htmlscript plain">listOfIntegers.add(Integer.valueOf(238));</code></div><div class="line number4 index3 alt1"><code class="htmlscript plain">Logger l = Logger.getLogger("Test");</code></div><div class="line number5 index4 alt2"><code class="htmlscript plain">l.info("Current List size: " + listOfIntegers.size());</code></div></div></td></tr></tbody></table></div></div></div></span><p>To retrieve an item from the <code>List</code>, call <code>get()</code> and
					pass it the index of the item you want:</p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_521625" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">List&lt;</code><code class="htmlscript plain">Integer</code><code class="htmlscript plain">&gt; listOfIntegers = new ArrayList&lt;&gt;();</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">listOfIntegers.add(Integer.valueOf(238));</code></div><div class="line number3 index2 alt2"><code class="htmlscript plain">Logger l = Logger.getLogger("Test");</code></div><div class="line number4 index3 alt1"><code class="htmlscript plain">l.info("Item at index 0 is: " listOfIntegers.get(0));</code></div></div></td></tr></tbody></table></div></div></div></span><p>In a real-world application, a <code>List</code> would contain records, or
					business objects, and you'd possibly want to look over them all as part of
					your processing. How do you do that in a generic fashion? Answer: You want
					to <em>iterate</em> over the collection, which you can do because
					<code>List</code> implements the <code>java.lang.Iterable</code>
					interface.</p><h3 id="N10FB8" class="ibm-h3">Iterable</h3><p>If a collection implements <code>java.lang.Iterable</code>, it's called an
					<em>iterable collection</em>. You can start at one end and walk
					through the collection item-by-item until you run out of items.</p><p>In the "<a href="#loops">Loops</a> section, I briefly mentioned the special
					syntax for iterating over collections that implement the
					<code>Iterable</code> interface. Here it is again in more detail:</p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_89352" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">for (objectType varName : collectionReference) {</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">// Start using objectType (via varName) right away...</code></div><div class="line number3 index2 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><p>The preceding code is abstract; here's a more realistic example:</p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_396482" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">List&lt;</code><code class="htmlscript plain">Integer</code><code class="htmlscript plain">&gt; listOfIntegers = obtainSomehow();</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">Logger l = Logger.getLogger("Test");</code></div><div class="line number3 index2 alt2"><code class="htmlscript plain">for (Integer i : listOfIntegers) {</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Integer value is : " + i);</code></div><div class="line number5 index4 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><p>That little code snippet does the same thing as this longer one:</p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_113191" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">List&lt;</code><code class="htmlscript plain">Integer</code><code class="htmlscript plain">&gt; listOfIntegers = obtainSomehow();</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">Logger l = Logger.getLogger("Test");</code></div><div class="line number3 index2 alt2"><code class="htmlscript plain">for (int aa = 0; aa &lt; listOfIntegers.size(); aa++) {</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">Integer I = listOfIntegers.get(aa);</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Integer value is : " + i);</code></div><div class="line number6 index5 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><p>The first snippet uses shorthand syntax: It has no <code>index</code>
					variable (<code>aa</code> in this case) to initialize, and no call to the
					<code>List</code> 's <code>get()</code> method.</p><p>Because <code>List</code> extends <code>java.util.Collection</code>, which
					implements <code>Iterable</code>, you can use the shorthand syntax to
					iterate over any <code>List</code>.</p><h3 id="N10FFD" class="ibm-h3">Sets</h3><p>A <code>Set</code> is a collections construct that by definition contains
					unique elements — that is, no duplicates. Whereas a
					<code>List</code> can contain the same object maybe hundreds of times, a
					<code>Set</code> can contain a particular instance only once. A Java
					<code>Set</code> collection can only hold objects, and it defines a strict
					contract about how it behaves.</p><p>Because <code>Set</code> is an interface, you can't instantiate it
					directly. One of my favorite implementations is <code>HashSet</code>,
					which is easy to use and similar to <code>List</code>.</p><p>Here are some things you do with a <code>Set</code>:</p><ul class="ibm-bullet-list"><li>Put something in the <code>Set</code>. </li><li>Ask the <code>Set</code> how big it currently is. </li><li>Get something out of the <code>Set</code>. </li></ul><p>A <code>Set</code>'s distinguishing attribute is that it guarantees
					uniqueness among its elements but doesn't care about the order of the
					elements. Consider the following code:</p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_291700" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">Set&lt;</code><code class="htmlscript plain">Integer</code><code class="htmlscript plain">&gt; setOfIntegers = new HashSet&lt;</code><code class="htmlscript plain">Integer</code><code class="htmlscript plain">&gt;();</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">setOfIntegers.add(Integer.valueOf(10));</code></div><div class="line number3 index2 alt2"><code class="htmlscript plain">setOfIntegers.add(Integer.valueOf(11));</code></div><div class="line number4 index3 alt1"><code class="htmlscript plain">setOfIntegers.add(Integer.valueOf(10));</code></div><div class="line number5 index4 alt2"><code class="htmlscript plain">for (Integer i : setOfIntegers) {</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Integer value is: " + i);</code></div><div class="line number7 index6 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><p>You might expect that the <code>Set</code> would have three elements in it,
					but it only has two because the <code>Integer</code> object that contains
					the value <code>10</code> is added only once.</p><p>Keep this behavior in mind when iterating over a <code>Set</code>, like
					so:</p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_345905" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">Set&lt;</code><code class="htmlscript plain">Integer</code><code class="htmlscript plain">&gt; setOfIntegers = new HashSet();</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">setOfIntegers.add(Integer.valueOf(10));</code></div><div class="line number3 index2 alt2"><code class="htmlscript plain">setOfIntegers.add(Integer.valueOf(20));</code></div><div class="line number4 index3 alt1"><code class="htmlscript plain">setOfIntegers.add(Integer.valueOf(30));</code></div><div class="line number5 index4 alt2"><code class="htmlscript plain">setOfIntegers.add(Integer.valueOf(40));</code></div><div class="line number6 index5 alt1"><code class="htmlscript plain">setOfIntegers.add(Integer.valueOf(50));</code></div><div class="line number7 index6 alt2"><code class="htmlscript plain">Logger l = Logger.getLogger("Test");</code></div><div class="line number8 index7 alt1"><code class="htmlscript plain">for (Integer i : setOfIntegers) {</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Integer value is : " + i);</code></div><div class="line number10 index9 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><p>Chances are that the objects print out in a different order from the order
					you added them in, because a <code>Set</code> guarantees uniqueness, not
					order. You can see this result if you paste the preceding code into the
					<code>main()</code> method of your <code>Person</code> class and run
					it.</p><h3 id="N1105C" class="ibm-h3">Maps</h3><p>A <code>Map</code> is a handy collection construct that you can use to
					associate one object (the <em>key</em>) with another (the <em>value</em>).
					As you might imagine, the key to the <code>Map</code> must be unique, and
					it's used to retrieve the value at a later time. A Java <code>Map</code>
					collection can only hold objects, and it defines a strict contract about
					how it behaves.</p><p>Because <code>Map</code> is an interface, you can't instantiate it
					directly. One of my favorite implementations is <code>HashMap</code>.</p><p>Things you do with <code>Map</code>s include:</p><ul class="ibm-bullet-list"><li>Put something in the <code>Map</code>. </li><li>Get something out of the <code>Map</code>. </li><li>Get a <code>Set</code> of keys to the <code>Map</code>— for
						iterating over it. </li></ul><p>To put something into a <code>Map</code>, you need to have an object that
					represents its key and an object that represents its value:</p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_308623" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">public Map&lt;</code><code class="htmlscript plain">String</code><code class="htmlscript plain">, Integer&gt; createMapOfIntegers() {</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">Map&lt;</code><code class="htmlscript plain">String</code><code class="htmlscript plain">, Integer&gt; mapOfIntegers = new HashMap&lt;&gt;();</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">mapOfIntegers.put("1", Integer.valueOf(1));</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">mapOfIntegers.put("2", Integer.valueOf(2));</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">mapOfIntegers.put("3", Integer.valueOf(3));</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">//...</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">mapOfIntegers.put("168", Integer.valueOf(168));</code></div><div class="line number8 index7 alt1"><code class="htmlscript plain">return mapOfIntegers;</code></div><div class="line number9 index8 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><p>In this example, <code>Map</code> contains <code>Integer</code> s, keyed by
					a <code>String</code>, which happens to be their <code>String</code>
					representation. To retrieve a particular <code>Integer</code> value, you
					need its <code>String</code> representation:</p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_970023" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">mapOfIntegers = createMapOfIntegers();</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">Integer oneHundred68 = mapOfIntegers.get("168");</code></div></div></td></tr></tbody></table></div></div></div></span><h3 id="N110B6" class="ibm-h3"> Using Set with Map</h3><p>On occasion, you might find yourself with a reference to a
					<code>Map</code>, and you want to walk over its entire set of contents. In
					this case, you need a <code>Set</code> of the keys to the
					<code>Map</code>:</p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_163330" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">Set&lt;</code><code class="htmlscript plain">String</code><code class="htmlscript plain">&gt; keys = mapOfIntegers.keySet();</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">Logger l = Logger.getLogger("Test");</code></div><div class="line number3 index2 alt2"><code class="htmlscript plain">for (String key : keys) {</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">Integer&nbsp; value = mapOfIntegers.get(key);</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">l.info("Value keyed by '" + key + "' is '" + value + "'");</code></div><div class="line number6 index5 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><p>Note that the <code>toString()</code> method of the <code>Integer</code>
					retrieved from the <code>Map</code> is automatically called when used in
					the <code>Logger</code> call. <code>Map</code> returns a <code>Set</code>
					of its keys because the <code>Map</code> is keyed, and each key is unique.
					Uniqueness (not order) is the distinguishing characteristic of a
					<code>Set</code> (which might explain why there's no
					<code>keyList()</code> method).</p><h2 id="N110E8" class="ibm-h2">Archiving Java code</h2><p>Now that you've learned a bit about writing Java applications, you might be
					wondering how to package them up so that other developers can use them, or
					how to import other developers' code into your applications. This section
					shows you how.</p><h3 id="N110EE" class="ibm-h3">JARs</h3><p>The JDK ships with a tool called JAR, which stands for Java Archive. You
					use this tool to create JAR files. After you package your code into a JAR
					file, other developers can drop the JAR file into their projects and
					configure their projects to use your code.</p><p> Creating a JAR file in Eclipse is easy. In your workspace, right-click the
					<code>com.makotojava.intro</code> package and click <strong>File &gt;
						Export</strong>. You see the dialog box shown in Figure 10. Choose
					<strong>Java &gt; JAR file</strong> and click <strong>Next</strong>. </p><h5 id="fig10" class="ibm-h5">Figure 10. Export dialog box</h5><img src="figure10.png" class="ibm-downsize" alt="Screenshot of the Eclipse export dialog box." height="551" width="527"><p class="ibm-ind-link ibm-hide"><a class="ibm-popup-link" onclick="IBMCore.common.widget.overlay.show('N11108');return false;" href="#N11108">View image at full size</a></p><p> When the next dialog box opens, browse to the location where you want to
					store your JAR file and name the file whatever you like. The .jar
					extension is the default, which I recommend using. Click
					<strong>Finish</strong>. </p><p>You see your JAR file in the location you selected. You can use the classes
					in it from your code if you put the JAR in your build path in Eclipse.
					Doing that is easy, too, as you see next.</p><h4 id="N11114" class="ibm-h4">Using third-party
					applications</h4><p>The JDK is comprehensive, but it doesn't do everything you need for writing
					great Java code. As you grow more comfortable with writing Java
					applications, you might want to use more and more third-party applications
					to support your code. The Java open source community provides many
					libraries to help shore up these gaps.</p><p>Suppose, for example, that you want to use <a href="https://commons.apache.org/proper/commons-lang/">Apache Commons
						Lang</a>, a JDK replacement library for manipulating the core Java
					classes. The classes provided by Commons Lang help you manipulate arrays,
					create random numbers, and perform string manipulation.</p><p>Let's assume you've already downloaded Commons Lang, which is stored in a
					JAR file. To use the classes, your first step is to create a lib directory
					in your project and drop the JAR file into it:</p><ol><li>Right-click the Intro root folder in the Eclipse Project Explorer
						view.</li><li>Click <strong>New &gt; Folder</strong> and call the folder
						<code>lib</code>. </li><li>Click <strong>Finish</strong>. </li></ol><p>The new folder shows up at the same level as src. Now copy the Commons Lang
					JAR file into your new lib directory. For this example, the file is called
					commons-lang3-3.4.jar. (It's common in naming a JAR file to include the
					version number, in this case 3.4.)</p><p>Now all you need to do is tell Eclipse to include the classes in the
					commons-lang3-3.4.jar file into your project:</p><ol><li>In Package Explorer, select the lib folder, right-click, and select
						<strong>Refresh</strong>.</li><li> Verify that the JAR shows up in the lib folder: <img src="commons-lang.png" class="ibm-downsize" alt="Screenshot of the refreshed lib folder" height="302" width="380"><p class="ibm-ind-link ibm-hide"><a class="ibm-popup-link" onclick="IBMCore.common.widget.overlay.show('N11140');return false;" href="#N11140">View image at full size</a></p></li><li>Right-click commons-lang3-3.4 and choose <strong>Build Path &gt; Add
							to Build Path</strong>.</li></ol><p>After Eclipse processes the code (that is, the class files) in the JAR
					file, they're available to reference (import) from your Java code. Notice
					in Project Explorer that you have a new folder called Referenced Libraries
					that contains the commons-lang3-3.4.jar file.</p><h2 id="writing" class="ibm-h2">Writing good Java code</h2><p>You've got enough Java syntax under your belt to write basic Java programs,
					which means that the first half of this tutorial is about to conclude.
					This final section lays out a few best practices that can help you write
					cleaner, more maintainable Java code.</p><h3 id="N11152" class="ibm-h3">Keep classes small</h3><p>So far you've created a few classes. After generating getter/setter pairs
					for even the small number (by the standards of a real-world Java class) of
					attributes, the <code>Person</code> class has 150 lines of code. At that
					size, <code>Person</code> is a small class. It's not uncommon (and it's
					unfortunate) to see classes with 50 or 100 methods and a thousand lines or
					more of source. Some classes might be that large out of necessity, but
					most likely they need to be <em>refactored</em>. Refactoring is changing
					the design of existing code without changing its results. I recommend that
					you follow this best practice.</p><p>In general, a class represents a conceptual entity in your application, and
					a class's size should reflect only the functionality to do whatever that
					entity needs to do. Keep your classes tightly focused to do a small number
					of things and do them well.</p><p>Keep only the methods that you need. If you need several helper methods
					that do essentially the same thing but take different parameters (such as
					the <code>printAudit()</code> method), that's a fine choice. But be sure
					to limit the list of methods to what you need, and no more.</p><h3 id="N11169" class="ibm-h3">Name methods carefully</h3><p>A good coding pattern when it comes to method names is the
					<em>intention-revealing</em> method-names pattern. This pattern is
					easiest to understand with a simple example. Which of the following method
					names is easier to decipher at a glance?</p><ul class="ibm-bullet-list"><li><code>a()</code></li><li><code>computeInterest()</code></li></ul><p>The answer should be obvious, yet for some reason, programmers have a
					tendency to give methods (and variables, for that matter) small,
					abbreviated names. Certainly, a ridiculously long name can be
					inconvenient, but a name that conveys what a method does needn't be
					ridiculously long. Six months after you write a bunch of code, you might
					not remember what you meant to do with a method called
					<code>compInt()</code>, but it's obvious that a method called
					<code>computeInterest()</code>, well, probably computes interest.</p><h3 id="N11182" class="ibm-h3">Keep methods small</h3><p>Small methods are as preferable as small classes, for similar reasons. One
					idiom I try to follow is to keep the size of a method to <strong>one
						page</strong> as I look at it on my screen. This practice makes my
					application classes more maintainable.</p><div class="dw-article-sidebar ibm-background-cool-white-20"><p><strong>In the footsteps of Fowler</strong><br> The best book in the
						industry (in my opinion, and I'm not alone) is <em>Refactoring:
							Improving the Design of Existing Code</em> by Martin Fowler et al.
						This book is even fun to read. The authors talk about "code smells"
						that beg for refactoring, and they go into great detail about the
						various techniques for fixing them.</p></div><p>If a method grows beyond one page, I refactor it. Eclipse has a wonderful
					set of refactoring tools. Usually, a long method contains subgroups of
					functionality bunched together. Take this functionality and move it to
					another method (naming it accordingly) and pass in parameters as
					needed.</p><p>Limit each method to a single job. I've found that a method doing only one
					thing well doesn't usually take more than about 30 lines of code.</p><p>Refactoring and the ability to write test-first code are the most important
					skills for new programmers to learn. If everybody were good at both, it
					would revolutionize the industry. If you become good at both, you will
					ultimately produce cleaner code and more-functional applications than many
					of your peers.</p><h3 id="N1119B" class="ibm-h3">Use comments</h3><p>Please, use comments. The people who follow along behind you (or even you,
					yourself, six months down the road) will thank you. You might have heard
					the old adage <em>Well-written code is self-documenting, so who needs
						comments?</em> I'll give you two reasons why I believe this adage is
					false:</p><ul class="ibm-bullet-list"><li>Most code is not well written.</li><li>Try as we might, our code probably isn't as well written as we'd like
						to think.</li></ul><p>So, comment your code. Period.</p><h3 id="N111AC" class="ibm-h3">Use a consistent style</h3><p>Coding style is a matter of personal preference, but I advise you to use
					standard Java syntax for braces:</p><div class="ibm-syntax-container"><div><div id="highlighter_170578" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">public static void main(String[] args) {</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>Don't use this style:</p><div class="ibm-syntax-container"><div><div id="highlighter_869496" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">public static void main(String[] args)</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">{</code></div><div class="line number3 index2 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>Or this one:</p><div class="ibm-syntax-container"><div><div id="highlighter_924983" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">public static void main(String[] args)</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>Why? Well, it's standard, so most code you run across (as in, code you
					didn't write but might be paid to maintain) will most likely be written
					that way. Eclipse <strong>does</strong> allow you to define code styles
					and format your code any way you like. But, being new to Java, you
					probably don't have a style yet. So I suggest you adopt the Java standard
					from the start.</p><h3 id="N111C8" class="ibm-h3">Use built-in logging</h3><p>Before Java 1.4 introduced built-in logging, the canonical way to find out
					what your program was doing was to make a system call like this one:</p><div class="ibm-syntax-container"><div><div id="highlighter_261705" class="syntaxhighlighter nogutter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">public void someMethod() {</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">// Do some stuff...</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">// Now tell all about it</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println("Telling you all about it:");</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">// Etc...</code></div><div class="line number6 index5 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>The Java language's built-in logging facility (refer back to the "<a href="#yourfirst">Your first Java class</a>" section) is a better
					alternative. I <strong>never</strong> use
					<code>System.out.println()</code> in my code, and I suggest you don't use
					it either. Another alternative is the commonly used <a href="http://logging.apache.org/log4j/2.x/">log4j</a> replacement
					library, part of the Apache umbrella project.</p><h2 id="N111E3" class="ibm-h2">Conclusion to Part 1</h2><p>In this tutorial, you learned about object-oriented programming, discovered
					Java syntax that you can use to create useful objects, and familiarized
					yourself with an IDE that helps you control your development environment.
					You know how to create and run Java objects that can do a good number of
					things, including doing different things based on different input. You
					also know how to JAR up your applications for other developers to use in
					their programs, and you've got some basic best Java programming practices
					under your belt.</p><h3 id="N111E9" class="ibm-h3">What's next</h3><p> In the <a href="http://www.ibm.com/developerworks/java/tutorials/j-introtojava2/index.html">second half of this tutorial</a>, you begin learning about some of
					the more advanced constructs of Java programming, although the overall
					discussion is still introductory in scope. Java programming topics covered
					in that tutorial include: </p><ul class="ibm-bullet-list"><li>Exception handling</li><li>Inheritance and abstraction</li><li>Interfaces</li><li>Nested classes</li><li>Regular expressions</li><li>Generics</li><li>Enum types</li><li>I/O</li><li>Serialization</li></ul><p> Read "<a href="http://www.ibm.com/developerworks/java/tutorials/j-introtojava2/index.html"><em>Introduction to Java programming</em>, Part 2: Constructs for
						real-world applications</a>." </p><!--CMA ID: 507256--><!--Site ID: 1--><!--XSLT stylesheet used to transform this file: dw-document-html-8.0.xsl-->
				<!-- Article Resources -->
				<div class="ibm-alternate-rule"><hr></div><h4 id="artdownload" class="ibm-h4">Downloadable resources</h4><ul class="ibm-link-list"><li><a class="ibm-pdf-link" href="j-introtojava1-pdf.pdf">PDF of this content</a></li></ul><div class="ibm-alternate-rule"><hr></div><h4 id="artrelatedtopics" class="ibm-h4">Related topics</h4><ul class="ibm-plain-list"><li><a href="http://www.ibm.com/developerworks/learn/java/index.html">developerWorks Java development</a></li><li><a href="https://developer.ibm.com/javasdk">IBM developer kits</a></li><li><a href="https://www.ibm.com/developerworks/library/ws-using-oo/">OO Design Process: The object primer</a></li><li><a href="http://www.ibm.com/developerworks/java/library/j-5things2/index.html">5 things you didn't know about ... the Java Collections API,
							Part 1</a></li><li><a href="http://www.ibm.com/developerworks/java/library/j-5things3/index.html">5 things you didn't know about ... the Java Collections API,
							Part 2</a></li><li><a href="http://www.ibm.com/developerworks/java/library/j-5things6/index.html">5 things you didn't know about ... JARs</a></li><li><a href="http://www.ibm.com/developerworks/java/library/j-noaccent/index.html">Speaking the Java language without an accent</a></li><li><a href="https://developer.ibm.com/code/technologies/java/">IBM Code: Java journeys</a></li></ul>
				<!-- Commenting -->
				<!-- INLINE_COMMENTS_BEGIN: -->
				<div class="ibm-alternate-rule"><hr></div>
				<div id="dw-article-cmts-top" class="ibm-columns">
					<div class="ibm-col-6-2">
						<h4 id="icomments" class="ibm-h4">Comments</h4>
						<div id="dw-article-cmts-login">
							<p><a onclick="window.location=userLinks[0].url;" tabindex="0" role="link">Sign in</a> or
								<a onclick="window.location=userLinks[1].url;" tabindex="0" role="link">register</a> to add and subscribe to comments.</p>
						</div>
					</div>
					<div class="ibm-col-6-2" id="dw-notify">
						<input type="checkbox" value="1" name="comment_notification" id="comment_notification" disabled="">
						<label for="comment_notification" style="color: rgb(204, 204, 204);">Subscribe me to comment notifications</label>
					</div>
				</div>

				<div class="dw-article-cmts-container">
					<div class="ibm-no-print jquery-comments read-only" id="dw-icomments-container"><div class="commenting-field main"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round by-current-user"><div class="textarea-wrapper"><span class="close" style="display: none;"><span class="left"></span><span class="right"></span></span><div class="textarea" data-placeholder="Add a comment" contenteditable="true" style="height: 3.65em;"></div><div class="control-row" style="display: none;"><span class="send save highlight-background">Submit</span></div></div></div><ul class="navigation"><div class="navigation-wrapper"><li data-sort-key="newest" data-container-name="comments" class="active">Newest</li><li data-sort-key="oldest" data-container-name="comments">Oldest</li><li data-sort-key="popularity" data-container-name="comments">Popular</li></div><div class="navigation-wrapper responsive"><li class="title active"><header>Newest</header></li><ul class="dropdown"><li data-sort-key="newest" data-container-name="comments" class="active">Newest</li><li data-sort-key="oldest" data-container-name="comments">Oldest</li><li data-sort-key="popularity" data-container-name="comments">Popular</li></ul></div></ul><div class="data-container" data-container="comments"><ul id="comment-list" class="main"><li data-id="27749" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1504833130051">08 Sep 2017</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/JenniAloi">JenniAloi</a></div><div class="wrapper"><div class="content">@MartinLJ, I'll check into why that image isn't displaying properly, but in the meantime, you might also want to review Steve's "Intro to Java programming" learning path, which covers an almost identical&nbsp;topic list, but in a more learner-friendly way with videos and Q&amp;A to test your skills. You can get started here:&nbsp;<a href="https://www.ibm.com/developerworks/learn/java/intro-to-java-course/index.html" target="_blank">https://www.ibm.com/developerworks/learn/java/intro-to-java-course/index.html</a></div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20%40MartinLJ%2C%20I'll%20check%20into%20why%20that%20image%20isn't%20displaying%20properly%2C%20but%20in%20the%20meantime%2C%20you%20might%20also%20want%20to%20review%20Steve's%20%22Intro%20to%20Java%20programming%22%20learning%20path%2C%20which%20covers%20an%20almost%20identical%C2%A0topic%20list%2C%20but%20in%20a%20more%20learner-friendly%20way%20with%20videos%20and%20Q%26A%20to%20test%20your%20skills.%20You%20can%20get%20started%20here%3A%C2%A0https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Flearn%2Fjava%2Fintro-to-java-course%2Findex.html%0DPosted%20by%20JenniAloi%20on%2008%20Sep%202017%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="27748" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1504832307341">08 Sep 2017</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/MartinLJ">MartinLJ</a></div><div class="wrapper"><div class="content">I am new to development...Brand new (no previous experience) . And I am slowly but surely comprehending what I am reading/typing. However I got stuck and turned around at the Junit test case phase. There is no Figure 8 to use as a guide . please help and thank you . &nbsp;</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20I%20am%20new%20to%20development...Brand%20new%20(no%20previous%20experience)%20.%20And%20I%20am%20slowly%20but%20surely%20comprehending%20what%20I%20am%20reading%2Ftyping.%20However%20I%20got%20stuck%20and%20turned%20around%20at%20the%20Junit%20test%20case%20phase.%20There%20is%20no%20Figure%208%20to%20use%20as%20a%20guide%20.%20please%20help%20and%20thank%20you%20.%20%C2%A0%0DPosted%20by%20MartinLJ%20on%2008%20Sep%202017%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="27609" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1503112244910">19 Aug 2017</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/Fuhpi">Fuhpi</a></div><div class="wrapper"><div class="content">It's a very useful guide. I'm familiar with C, so it satisfies me very well. &nbsp; Thanks a lot!
												I'd like to point out a very little error: in the section "Map", &nbsp;missing a return statement in method&nbsp;createMapOfIntegers().&nbsp;
												And I think it may be more helpful for learner if pointing out that should create a project before creating a Package in section "Creating a Package", and point out should import properly class when using, for example, ArrayList and List.<time class="edited" data-original="1503112698923">Edited 19 Aug 2017</time></div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20It's%20a%20very%20useful%20guide.%20I'm%20familiar%20with%20C%2C%20so%20it%20satisfies%20me%20very%20well.%20%C2%A0%20Thanks%20a%20lot!%0AI'd%20like%20to%20point%20out%20a%20very%20little%20error%3A%20in%20the%20section%20%22Map%22%2C%20%C2%A0missing%20a%20return%20statement%20in%20method%C2%A0createMapOfIntegers().%C2%A0%0AAnd%20I%20think%20it%20may%20be%20more%20helpful%20for%20learner%20if%20pointing%20out%20that%20should%20create%20a%20project%20before%20creating%20a%20Package%20in%20section%20%22Creating%20a%20Package%22%2C%20and%20point%20out%20should%20import%20properly%20class%20when%20using%2C%20for%20example%2C%20ArrayList%20and%20List.%0DPosted%20by%20Fuhpi%20on%2019%20Aug%202017%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"><li data-id="27610" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1503113657238">19 Aug 2017</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/jstevenperry">jstevenperry</a></div><div class="wrapper"><div class="content">Hi Fuhpi, you are absolutely correct about the createMapOfIntegers() method. It should return a value (the mapOfIntegers). Thanks for catching this. I've contacted the dW editorial team and the fix will be posted as soon as humanly possible. Thanks for reading! --jsp</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20Hi%20Fuhpi%2C%20you%20are%20absolutely%20correct%20about%20the%20createMapOfIntegers()%20method.%20It%20should%20return%20a%20value%20(the%20mapOfIntegers).%20Thanks%20for%20catching%20this.%20I've%20contacted%20the%20dW%20editorial%20team%20and%20the%20fix%20will%20be%20posted%20as%20soon%20as%20humanly%20possible.%20Thanks%20for%20reading!%20--jsp%0DPosted%20by%20jstevenperry%20on%2019%20Aug%202017%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div></li></ul></li><li data-id="26750" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1492745111750">21 Apr 2017</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/datadoc">datadoc</a></div><div class="wrapper"><div class="content">Is it possible for you to include a complete code listing for the Person class as of the end of part 1 of this tutorial?&nbsp; Since it will form the basis of exercises in Part 2, that would be useful.&nbsp; For example, you make several references to the main method of the class in the text in Part 1, but it is never made explicitly clear whether that code should be added to the source in Eclipse or not.&nbsp; The same holds true for the various code snippets in the Collections discussions and elsewhere.&nbsp; I've managed to muddle through so far but it would be good to have a solid, certain starting point for Part 2!&nbsp; Thanks - overall, a very helpful guide.<time class="edited" data-original="1492745171890">Edited 21 Apr 2017</time></div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20Is%20it%20possible%20for%20you%20to%20include%20a%20complete%20code%20listing%20for%20the%20Person%20class%20as%20of%20the%20end%20of%20part%201%20of%20this%20tutorial%3F%C2%A0%20Since%20it%20will%20form%20the%20basis%20of%20exercises%20in%20Part%202%2C%20that%20would%20be%20useful.%C2%A0%20For%20example%2C%20you%20make%20several%20references%20to%20the%20main%20method%20of%20the%20class%20in%20the%20text%20in%20Part%201%2C%20but%20it%20is%20never%20made%20explicitly%20clear%20whether%20that%20code%20should%20be%20added%20to%20the%20source%20in%20Eclipse%20or%20not.%C2%A0%20The%20same%20holds%20true%20for%20the%20various%20code%20snippets%20in%20the%20Collections%20discussions%20and%20elsewhere.%C2%A0%20I've%20managed%20to%20muddle%20through%20so%20far%20but%20it%20would%20be%20good%20to%20have%20a%20solid%2C%20certain%20starting%20point%20for%20Part%202!%C2%A0%20Thanks%20-%20overall%2C%20a%20very%20helpful%20guide.%0DPosted%20by%20datadoc%20on%2021%20Apr%202017%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"><li data-id="26751" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1492746988947">21 Apr 2017</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/jstevenperry">jstevenperry</a></div><div class="wrapper"><div class="content">@datadoc As you've seen in working through the material, in Part 1 I present so much information while using (and reusing) the Person class, it's difficult to have a "solution" at the end. I'm sure what you have for the Person class at the end of Part 1 will serve you just fine as you dive into Part 2. As an author, I have tried to strike a delicate balance between providing too much information (robbing you of the opportunity to learn) and providing too little information (leaving you frustrated). It sounds like the latter has happened in your case, and I only hope you continue to press forward and learn more about this truly marvelous language and platform. Thank you for your comments, and thanks for reading! --jsp<time class="edited" data-original="1492747031146">Edited 21 Apr 2017</time></div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20%40datadoc%20As%20you've%20seen%20in%20working%20through%20the%20material%2C%20in%20Part%201%20I%20present%20so%20much%20information%20while%20using%20(and%20reusing)%20the%20Person%20class%2C%20it's%20difficult%20to%20have%20a%20%22solution%22%20at%20the%20end.%20I'm%20sure%20what%20you%20have%20for%20the%20Person%20class%20at%20the%20end%20of%20Part%201%20will%20serve%20you%20just%20fine%20as%20you%20dive%20into%20Part%202.%20As%20an%20author%2C%20I%20have%20tried%20to%20strike%20a%20delicate%20balance%20between%20providing%20too%20much%20information%20(robbing%20you%20of%20the%20opportunity%20to%20learn)%20and%20providing%20too%20little%20information%20(leaving%20you%20frustrated).%20It%20sounds%20like%20the%20latter%20has%20happened%20in%20your%20case%2C%20and%20I%20only%20hope%20you%20continue%20to%20press%20forward%20and%20learn%20more%20about%20this%20truly%20marvelous%20language%20and%20platform.%20Thank%20you%20for%20your%20comments%2C%20and%20thanks%20for%20reading!%20--jsp%0DPosted%20by%20jstevenperry%20on%2021%20Apr%202017%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div></li></ul></li><li data-id="25761" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1476819902181">18 Oct 2016</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/askaRod">askaRod</a></div><div class="wrapper"><div class="content">That is the excellent review! Very precise, thank you!Who is interested in Java can check new knowledge by passing quizzes on&nbsp;&nbsp;<a href="http://quizful.com/" target="_blank">http://quizful.com/</a></div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20That%20is%20the%20excellent%20review!%20Very%20precise%2C%20thank%20you!Who%20is%20interested%20in%20Java%20can%20check%20new%20knowledge%20by%20passing%20quizzes%20on%C2%A0%C2%A0http%3A%2F%2Fquizful.com%2F%0DPosted%20by%20askaRod%20on%2018%20Oct%202016%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="25521" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1472891315321">03 Sep 2016</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/abdou007">abdou007</a></div><div class="wrapper"><div class="content">Thank you for this quick review of java.
												It was very helpful for me.</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20Thank%20you%20for%20this%20quick%20review%20of%20java.%0AIt%20was%20very%20helpful%20for%20me.%0DPosted%20by%20abdou007%20on%2003%20Sep%202016%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="24817" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1461876040949">28 Apr 2016</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/SheikhAdeel">SheikhAdeel</a></div><div class="wrapper"><div class="content">Hello, jstevenperry  first of all thank you for your reply and to be honest you are quite right that i haven't given any details for the problem i am facing, well i used the mouse over on my Eclipse editor  and  the error says twice  on same line 13  "Person cannot be resolved to a type."</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20Hello%2C%20jstevenperry%20%20first%20of%20all%20thank%20you%20for%20your%20reply%20and%20to%20be%20honest%20you%20are%20quite%20right%20that%20i%20haven't%20given%20any%20details%20for%20the%20problem%20i%20am%20facing%2C%20well%20i%20used%20the%20mouse%20over%20on%20my%20Eclipse%20editor%20%20and%20%20the%20error%20says%20twice%20%20on%20same%20line%2013%20%20%22Person%20cannot%20be%20resolved%20to%20a%20type.%22%0DPosted%20by%20SheikhAdeel%20on%2028%20Apr%202016%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="24814" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1461858992637">28 Apr 2016</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/jstevenperry">jstevenperry</a></div><div class="wrapper"><div class="content">Hello, SheikhAdeel. In order to try and help you out, I'm afraid I will have to make some assumptions, one of which is that you are using Eclipse. Another is that by "highlighted with red line" you mean that there is a "squiggly" red line under that particular line of code in your Eclipse editor window.

												Provided those assumptions are correct, Eclipse is trying to tell you that you have a compile error on that line. Furthermore, this would be accompanied by a message with more information about the error (either through a "popup" message, or on the status line at the bottom of the IDE).

												Try this: hover your mouse cursor over that line in your Eclipse editor window, and read the message that pops up. This should help you diagnose and correct the error.

												With the limited information you've provided, that is as specific as I can get. I hope this helped, and thanks for reading!

												--jsp</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20Hello%2C%20SheikhAdeel.%20In%20order%20to%20try%20and%20help%20you%20out%2C%20I'm%20afraid%20I%20will%20have%20to%20make%20some%20assumptions%2C%20one%20of%20which%20is%20that%20you%20are%20using%20Eclipse.%20Another%20is%20that%20by%20%22highlighted%20with%20red%20line%22%20you%20mean%20that%20there%20is%20a%20%22squiggly%22%20red%20line%20under%20that%20particular%20line%20of%20code%20in%20your%20Eclipse%20editor%20window.%20%0A%0AProvided%20those%20assumptions%20are%20correct%2C%20Eclipse%20is%20trying%20to%20tell%20you%20that%20you%20have%20a%20compile%20error%20on%20that%20line.%20Furthermore%2C%20this%20would%20be%20accompanied%20by%20a%20message%20with%20more%20information%20about%20the%20error%20(either%20through%20a%20%22popup%22%20message%2C%20or%20on%20the%20status%20line%20at%20the%20bottom%20of%20the%20IDE).%0A%0ATry%20this%3A%20hover%20your%20mouse%20cursor%20over%20that%20line%20in%20your%20Eclipse%20editor%20window%2C%20and%20read%20the%20message%20that%20pops%20up.%20This%20should%20help%20you%20diagnose%20and%20correct%20the%20error.%0A%0AWith%20the%20limited%20information%20you've%20provided%2C%20that%20is%20as%20specific%20as%20I%20can%20get.%20I%20hope%20this%20helped%2C%20and%20thanks%20for%20reading!%0A%0A--jsp%0DPosted%20by%20jstevenperry%20on%2028%20Apr%202016%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="24810" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1461847534738">28 Apr 2016</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/SheikhAdeel">SheikhAdeel</a></div><div class="wrapper"><div class="content">i am having problem with listing 6, line 12  the person is highlighted with red line no idea  why is that  ...newbie</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20i%20am%20having%20problem%20with%20listing%206%2C%20line%2012%20%20the%20person%20is%20highlighted%20with%20red%20line%20no%20idea%20%20why%20is%20that%20%20...newbie%0DPosted%20by%20SheikhAdeel%20on%2028%20Apr%202016%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="22917" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1431902636970">18 May 2015</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/AlmightyJB">AlmightyJB</a></div><div class="wrapper"><div class="content">Posted by AlmightyJB on 17 May 2015

												Nevermind I figured it out.</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20Posted%20by%20AlmightyJB%20on%2017%20May%202015%0A%0ANevermind%20I%20figured%20it%20out.%0DPosted%20by%20AlmightyJB%20on%2018%20May%202015%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="22916" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1431900428530">18 May 2015</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/AlmightyJB">AlmightyJB</a></div><div class="wrapper"><div class="content">Does anyone have the full working code from Listing 7?  Getting logger errors but not sure if it's a code issue of java connection issue.  Anyway to test that?  Newbie problems.  </div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20Does%20anyone%20have%20the%20full%20working%20code%20from%20Listing%207%3F%20%20Getting%20logger%20errors%20but%20not%20sure%20if%20it's%20a%20code%20issue%20of%20java%20connection%20issue.%20%20Anyway%20to%20test%20that%3F%20%20Newbie%20problems.%20%20%0DPosted%20by%20AlmightyJB%20on%2018%20May%202015%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="20102" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1392342054019">14 Feb 2014</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/bucka1510">bucka1510</a></div><div class="wrapper"><div class="content">Thanks a lot. A very well designed tutorial.</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20Thanks%20a%20lot.%20A%20very%20well%20designed%20tutorial.%0DPosted%20by%20bucka1510%20on%2014%20Feb%202014%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="11850" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1380633088971">01 Oct 2013</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/adekorir">adekorir</a></div><div class="wrapper"><div class="content">Thanks a lot for this interesting tutorial. Learnt more than I could have hoped for.</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20Thanks%20a%20lot%20for%20this%20interesting%20tutorial.%20Learnt%20more%20than%20I%20could%20have%20hoped%20for.%0DPosted%20by%20adekorir%20on%2001%20Oct%202013%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="11849" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1350460800000">17 Oct 2012</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/fakeid">fakeid</a></div><div class="wrapper"><div class="content">Thanks to intro of java</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20Thanks%20to%20intro%20of%20java%0DPosted%20by%20fakeid%20on%2017%20Oct%202012%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="11848" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1342080000000">12 Jul 2012</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/machannan">machannan</a></div><div class="wrapper"><div class="content">Very very nice and helpful.\nHaving a phone screening interview tomorrow by the Curam team, reading this material now to remind myself about basics of JAVA.</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20Very%20very%20nice%20and%20helpful.%5CnHaving%20a%20phone%20screening%20interview%20tomorrow%20by%20the%20Curam%20team%2C%20reading%20this%20material%20now%20to%20remind%20myself%20about%20basics%20of%20JAVA.%0DPosted%20by%20machannan%20on%2012%20Jul%202012%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="11847" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1333353600000">02 Apr 2012</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/webdeveloper1982">webdeveloper1982</a></div><div class="wrapper"><div class="content">Great material. I started with the lightweight &amp;lt;a href=\"http:\/\/www.itlearning.net\/java\"&amp;gt;Java Tutorial&amp;lt;\/a&amp;gt;, and it was pretty good also.</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20Great%20material.%20I%20started%20with%20the%20lightweight%20%26lt%3Ba%20href%3D%5C%22http%3A%5C%2F%5C%2Fwww.itlearning.net%5C%2Fjava%5C%22%26gt%3BJava%20Tutorial%26lt%3B%5C%2Fa%26gt%3B%2C%20and%20it%20was%20pretty%20good%20also.%0DPosted%20by%20webdeveloper1982%20on%2002%20Apr%202012%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="11846" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1303459200000">22 Apr 2011</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/ngrigas">ngrigas</a></div><div class="wrapper"><div class="content">Hi Steve, \nFinally, outstanding explanations on how Java works ! Thank you, Thank you, Thank you ! I've been trying to self-teach myself for a few years now and your material has broken through the cobwebs of an old Cobol programmers thinking to understand how to write code !\n \nU R Awesome !\n-Nancy</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20Hi%20Steve%2C%20%5CnFinally%2C%20outstanding%20explanations%20on%20how%20Java%20works%20!%20Thank%20you%2C%20Thank%20you%2C%20Thank%20you%20!%20I've%20been%20trying%20to%20self-teach%20myself%20for%20a%20few%20years%20now%20and%20your%20material%20has%20broken%20through%20the%20cobwebs%20of%20an%20old%20Cobol%20programmers%20thinking%20to%20understand%20how%20to%20write%20code%20!%5Cn%20%5CnU%20R%20Awesome%20!%5Cn-Nancy%0DPosted%20by%20ngrigas%20on%2022%20Apr%202011%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="11845" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1289210400000">08 Nov 2010</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/MacDonald">MacDonald</a></div><div class="wrapper"><div class="content">Thank's for these good informations. A good start for me to learn progamming with jaa. Great!</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20Thank's%20for%20these%20good%20informations.%20A%20good%20start%20for%20me%20to%20learn%20progamming%20with%20jaa.%20Great!%0DPosted%20by%20MacDonald%20on%2008%20Nov%202010%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="11844" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1287216000000">16 Oct 2010</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/MaViRuiz">MaViRuiz</a></div><div class="wrapper"><div class="content">J Steven, Thanks for this tutorial, is totally great. Just a good introduction.</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20J%20Steven%2C%20Thanks%20for%20this%20tutorial%2C%20is%20totally%20great.%20Just%20a%20good%20introduction.%0DPosted%20by%20MaViRuiz%20on%2016%20Oct%202010%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="11843" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1286265600000">05 Oct 2010</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/jstevenperry">jstevenperry</a></div><div class="wrapper"><div class="content">QuietZone, you are correct, there is an infinite loop, as was pointed out by Mike4263. This will be fixed ASAP. Thanks for reading.\n\n--jsp</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20QuietZone%2C%20you%20are%20correct%2C%20there%20is%20an%20infinite%20loop%2C%20as%20was%20pointed%20out%20by%20Mike4263.%20This%20will%20be%20fixed%20ASAP.%20Thanks%20for%20reading.%5Cn%5Cn--jsp%0DPosted%20by%20jstevenperry%20on%2005%20Oct%202010%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="11842" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1286265600000">05 Oct 2010</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/QuietZone">QuietZone</a></div><div class="wrapper"><div class="content">I don't think Listing 13 demonstrates quite what you intended. Using the while-loop results in an infinite loop as aa++ is never reached after the first iteration, i.e. once aa == 1, using the continue statement resumes the loop with aa == 1. I think a for-loop would be a better choice to demonstrate the continue statement.</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20I%20don't%20think%20Listing%2013%20demonstrates%20quite%20what%20you%20intended.%20Using%20the%20while-loop%20results%20in%20an%20infinite%20loop%20as%20aa%2B%2B%20is%20never%20reached%20after%20the%20first%20iteration%2C%20i.e.%20once%20aa%20%3D%3D%201%2C%20using%20the%20continue%20statement%20resumes%20the%20loop%20with%20aa%20%3D%3D%201.%20I%20think%20a%20for-loop%20would%20be%20a%20better%20choice%20to%20demonstrate%20the%20continue%20statement.%0DPosted%20by%20QuietZone%20on%2005%20Oct%202010%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="11841" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1283846400000">07 Sep 2010</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/jstevenperry">jstevenperry</a></div><div class="wrapper"><div class="content">Mike, you are quite correct. I have fixed the example to increment the loop variable before the continue and the tutorial will be updated shortly. Thanks for your comments, and for reading. Nice catch, by the way!\n--jsp</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20Mike%2C%20you%20are%20quite%20correct.%20I%20have%20fixed%20the%20example%20to%20increment%20the%20loop%20variable%20before%20the%20continue%20and%20the%20tutorial%20will%20be%20updated%20shortly.%20Thanks%20for%20your%20comments%2C%20and%20for%20reading.%20Nice%20catch%2C%20by%20the%20way!%5Cn--jsp%0DPosted%20by%20jstevenperry%20on%2007%20Sep%202010%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="11840" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1283846400000">07 Sep 2010</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/Mike4263">Mike4263</a></div><div class="wrapper"><div class="content">Steve - I just went through this to see if it was appropriate for my clients. I noticed that Listing 13 has an infinite loop. Otherwise its a pretty through intro to Java.</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20Steve%20-%20I%20just%20went%20through%20this%20to%20see%20if%20it%20was%20appropriate%20for%20my%20clients.%20I%20noticed%20that%20Listing%2013%20has%20an%20infinite%20loop.%20Otherwise%20its%20a%20pretty%20through%20intro%20to%20Java.%0DPosted%20by%20Mike4263%20on%2007%20Sep%202010%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="11839" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1283155200000">30 Aug 2010</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/jstevenperry">jstevenperry</a></div><div class="wrapper"><div class="content">George, I'm afraid I must agree with cguldner in the context of inheritance in a programming language and how taxonomies of \"things\" are put together within a business domain. If we were talking about how to set up a security system, I would agree with your description of behavior and the notion of gaining and losing roles over time, which is not a use case handled by a programming language (nor should it be). I'm perfectly okay with the fairly static nature of programmatic inheritance relationships as Java (and C++) implement them (\"static\" in that I have to change source code to change them). You've given me something to think about, though. Thanks for your comments, and thanks for reading!</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20George%2C%20I'm%20afraid%20I%20must%20agree%20with%20cguldner%20in%20the%20context%20of%20inheritance%20in%20a%20programming%20language%20and%20how%20taxonomies%20of%20%5C%22things%5C%22%20are%20put%20together%20within%20a%20business%20domain.%20If%20we%20were%20talking%20about%20how%20to%20set%20up%20a%20security%20system%2C%20I%20would%20agree%20with%20your%20description%20of%20behavior%20and%20the%20notion%20of%20gaining%20and%20losing%20roles%20over%20time%2C%20which%20is%20not%20a%20use%20case%20handled%20by%20a%20programming%20language%20(nor%20should%20it%20be).%20I'm%20perfectly%20okay%20with%20the%20fairly%20static%20nature%20of%20programmatic%20inheritance%20relationships%20as%20Java%20(and%20C%2B%2B)%20implement%20them%20(%5C%22static%5C%22%20in%20that%20I%20have%20to%20change%20source%20code%20to%20change%20them).%20You've%20given%20me%20something%20to%20think%20about%2C%20though.%20Thanks%20for%20your%20comments%2C%20and%20thanks%20for%20reading!%0DPosted%20by%20jstevenperry%20on%2030%20Aug%202010%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="11838" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1283155200000">30 Aug 2010</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/cguldner">cguldner</a></div><div class="wrapper"><div class="content">George: A subclass is a specialisation, a superclass is a generalisation. Employee should be a subclass of Person, because \"An employee is a person\". Not all persons are employees.</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20George%3A%20A%20subclass%20is%20a%20specialisation%2C%20a%20superclass%20is%20a%20generalisation.%20Employee%20should%20be%20a%20subclass%20of%20Person%2C%20because%20%5C%22An%20employee%20is%20a%20person%5C%22.%20Not%20all%20persons%20are%20employees.%0DPosted%20by%20cguldner%20on%2030%20Aug%202010%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="11837" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1282896000000">27 Aug 2010</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/G796_George_Ludgate">G796_George_Ludgate</a></div><div class="wrapper"><div class="content">Fabulous material which I will keep in my reference library for newbies to read. But I would just like to point out the common modeling error in Part I, page 14 where you show EMPLOYEE as a subclass of PERSON. This is wrong; any role is always a superclass of the kind-of-things which play that role. If you believe that Humans, Monkeys, Martians, Aliens could be Bank Tellers (for example) then each would have a common behavior model (say a state transition model) trained into them on the job, which determines what the role is allowed to do. As it is common to all those kinds of things then, as you say in Part II, page 28 on \u201CInheritance and Abstraction\u201D, the common behavior would be abstracted into a common superclass. Java, like all OOPLs does not implement OO Analysis models well; it does not represent relationships in the language nor the type of superclass relationships needed to implement the way a role works. You can gain and lose roles over time so the relationship has to be dynamic (ie can be changed). Most OOPLs only have static superclass relationships which means you have to implement roles using a normal relationships which you can form and break over time. EMPLOYEE would be a subclass of BUSINESS-ROLE which could be a subclass of ROLE. --- George</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20Fabulous%20material%20which%20I%20will%20keep%20in%20my%20reference%20library%20for%20newbies%20to%20read.%20But%20I%20would%20just%20like%20to%20point%20out%20the%20common%20modeling%20error%20in%20Part%20I%2C%20page%2014%20where%20you%20show%20EMPLOYEE%20as%20a%20subclass%20of%20PERSON.%20This%20is%20wrong%3B%20any%20role%20is%20always%20a%20superclass%20of%20the%20kind-of-things%20which%20play%20that%20role.%20If%20you%20believe%20that%20Humans%2C%20Monkeys%2C%20Martians%2C%20Aliens%20could%20be%20Bank%20Tellers%20(for%20example)%20then%20each%20would%20have%20a%20common%20behavior%20model%20(say%20a%20state%20transition%20model)%20trained%20into%20them%20on%20the%20job%2C%20which%20determines%20what%20the%20role%20is%20allowed%20to%20do.%20As%20it%20is%20common%20to%20all%20those%20kinds%20of%20things%20then%2C%20as%20you%20say%20in%20Part%20II%2C%20page%2028%20on%20%5Cu201CInheritance%20and%20Abstraction%5Cu201D%2C%20the%20common%20behavior%20would%20be%20abstracted%20into%20a%20common%20superclass.%20Java%2C%20like%20all%20OOPLs%20does%20not%20implement%20OO%20Analysis%20models%20well%3B%20it%20does%20not%20represent%20relationships%20in%20the%20language%20nor%20the%20type%20of%20superclass%20relationships%20needed%20to%20implement%20the%20way%20a%20role%20works.%20You%20can%20gain%20and%20lose%20roles%20over%20time%20so%20the%20relationship%20has%20to%20be%20dynamic%20(ie%20can%20be%20changed).%20Most%20OOPLs%20only%20have%20static%20superclass%20relationships%20which%20means%20you%20have%20to%20implement%20roles%20using%20a%20normal%20relationships%20which%20you%20can%20form%20and%20break%20over%20time.%20EMPLOYEE%20would%20be%20a%20subclass%20of%20BUSINESS-ROLE%20which%20could%20be%20a%20subclass%20of%20ROLE.%20---%20George%0DPosted%20by%20G796_George_Ludgate%20on%2027%20Aug%202010%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="11836" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1282550400000">23 Aug 2010</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/jstevenperry">jstevenperry</a></div><div class="wrapper"><div class="content">sklm: You're right; the \"this\" keyword needs more explanation, and the tutorial will be updated to reflect this.\n\nzeerax: I should have pointed out that a reference to a subtype (or interface implementation) can be assigned to a variable of its supertype (or interface). The tutorial will be updated with this information.\n\njjhowey: you are correct, and this oversight will be corrected soon. Nice catch!\n\nThanks to all for reading and for your comments!\nSteve Perry</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20sklm%3A%20You're%20right%3B%20the%20%5C%22this%5C%22%20keyword%20needs%20more%20explanation%2C%20and%20the%20tutorial%20will%20be%20updated%20to%20reflect%20this.%5Cn%5Cnzeerax%3A%20I%20should%20have%20pointed%20out%20that%20a%20reference%20to%20a%20subtype%20(or%20interface%20implementation)%20can%20be%20assigned%20to%20a%20variable%20of%20its%20supertype%20(or%20interface).%20The%20tutorial%20will%20be%20updated%20with%20this%20information.%5Cn%5Cnjjhowey%3A%20you%20are%20correct%2C%20and%20this%20oversight%20will%20be%20corrected%20soon.%20Nice%20catch!%5Cn%5CnThanks%20to%20all%20for%20reading%20and%20for%20your%20comments!%5CnSteve%20Perry%0DPosted%20by%20jstevenperry%20on%2023%20Aug%202010%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="11835" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1282550400000">23 Aug 2010</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/jjhowey">jjhowey</a></div><div class="wrapper"><div class="content">It also appears that Listing 4 has a bug (if it's intentional then it should be stated).... \non the parameterized Constructor, the age parameter exists twice yet no weight param.</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20It%20also%20appears%20that%20Listing%204%20has%20a%20bug%20(if%20it's%20intentional%20then%20it%20should%20be%20stated)....%20%5Cnon%20the%20parameterized%20Constructor%2C%20the%20age%20parameter%20exists%20twice%20yet%20no%20weight%20param.%0DPosted%20by%20jjhowey%20on%2023%20Aug%202010%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="11833" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1282464000000">22 Aug 2010</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/zeerax">zeerax</a></div><div class="wrapper"><div class="content">I had some trouble on page 13, where Java Collections where introduced. Specifically when ArrayLists, Sets, etc. were declared the code just wouldn't work.\n\nI had changed it slightly, i.e: \n\nthis: List listOfObjects = new ArrayList();\nto: ArrayList listOfObjects = new ArrayList();\nand imported java.util.ArrayList\nI am not sure however whether I am doing it correct.\n\nSo far the introduction is enjoyable. Exactly what I needed to get a decent understanding of Java.</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20I%20had%20some%20trouble%20on%20page%2013%2C%20where%20Java%20Collections%20where%20introduced.%20Specifically%20when%20ArrayLists%2C%20Sets%2C%20etc.%20were%20declared%20the%20code%20just%20wouldn't%20work.%5Cn%5CnI%20had%20changed%20it%20slightly%2C%20i.e%3A%20%5Cn%5Cnthis%3A%20List%20listOfObjects%20%3D%20new%20ArrayList()%3B%5Cnto%3A%20ArrayList%20listOfObjects%20%3D%20new%20ArrayList()%3B%5Cnand%20imported%20java.util.ArrayList%5CnI%20am%20not%20sure%20however%20whether%20I%20am%20doing%20it%20correct.%5Cn%5CnSo%20far%20the%20introduction%20is%20enjoyable.%20Exactly%20what%20I%20needed%20to%20get%20a%20decent%20understanding%20of%20Java.%0DPosted%20by%20zeerax%20on%2022%20Aug%202010%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="11834" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1282464000000">22 Aug 2010</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/zeerax">zeerax</a></div><div class="wrapper"><div class="content">It appears that my comment had its lesser than and greater than symbols along with its content removed and as a result the formal types are missing.</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20It%20appears%20that%20my%20comment%20had%20its%20lesser%20than%20and%20greater%20than%20symbols%20along%20with%20its%20content%20removed%20and%20as%20a%20result%20the%20formal%20types%20are%20missing.%0DPosted%20by%20zeerax%20on%2022%20Aug%202010%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="11832" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1282464000000">22 Aug 2010</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/sklm">sklm</a></div><div class="wrapper"><div class="content">In Listing 4. Person class definition with a constructor, the \"this\" keyword pops in without any introduction, and seemingly remains unexplained for at least the rest of the Part 1.</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fjava%2Ftutorials%2Fj-introtojava1%2Findex.html&amp;mymessage=Comment%3A%20In%20Listing%204.%20Person%20class%20definition%20with%20a%20constructor%2C%20the%20%5C%22this%5C%22%20keyword%20pops%20in%20without%20any%20introduction%2C%20and%20seemingly%20remains%20unexplained%20for%20at%20least%20the%20rest%20of%20the%20Part%201.%0DPosted%20by%20sklm%20on%2022%20Aug%202010%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li></ul><div class="no-comments no-data"><i class="fa fa-comments fa-2x"></i><br>Be the first to add a comment</div></div></div>
				</div>
				<!-- INLINE_COMMENTS_END -->                                        <!-- CENTER_6_4_CONTENT_COLUMN_END -->
			</div>

			


		</div>
	</div>	
</section>







<!-- ************************************************************************************** -->

@stop
